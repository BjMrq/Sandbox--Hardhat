/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace AllThingsBox {
  export type CoolStructStruct = { coolName: string; coolLevel: BigNumberish };

  export type CoolStructStructOutput = [string, BigNumber] & {
    coolName: string;
    coolLevel: BigNumber;
  };
}

export interface AllThingsBoxInterface extends utils.Interface {
  functions: {
    "aPublicString()": FunctionFragment;
    "getAddress()": FunctionFragment;
    "getArray()": FunctionFragment;
    "getInteger()": FunctionFragment;
    "getString()": FunctionFragment;
    "getStruct()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "testInput(string,uint112,address,string[],(string,uint256))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aPublicString"
      | "getAddress"
      | "getArray"
      | "getInteger"
      | "getString"
      | "getStruct"
      | "owner"
      | "renounceOwnership"
      | "testInput"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aPublicString",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getArray", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInteger",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getString", values?: undefined): string;
  encodeFunctionData(functionFragment: "getStruct", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testInput",
    values: [
      string,
      BigNumberish,
      string,
      string[],
      AllThingsBox.CoolStructStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "aPublicString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getArray", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getInteger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getString", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStruct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Nothing(string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Nothing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface NothingEventObject {
  anyThing: string;
}
export type NothingEvent = TypedEvent<[string], NothingEventObject>;

export type NothingEventFilter = TypedEventFilter<NothingEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface AllThingsBox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AllThingsBoxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aPublicString(overrides?: CallOverrides): Promise<[string]>;

    getAddress(overrides?: CallOverrides): Promise<[string]>;

    getArray(overrides?: CallOverrides): Promise<[string[]]>;

    getInteger(overrides?: CallOverrides): Promise<[BigNumber]>;

    getString(overrides?: CallOverrides): Promise<[string]>;

    getStruct(
      overrides?: CallOverrides
    ): Promise<[AllThingsBox.CoolStructStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testInput(
      _someString: string,
      _anyNumber: BigNumberish,
      _testAddress: string,
      _moreArray: string[],
      _aCoolStruct: AllThingsBox.CoolStructStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  aPublicString(overrides?: CallOverrides): Promise<string>;

  getAddress(overrides?: CallOverrides): Promise<string>;

  getArray(overrides?: CallOverrides): Promise<string[]>;

  getInteger(overrides?: CallOverrides): Promise<BigNumber>;

  getString(overrides?: CallOverrides): Promise<string>;

  getStruct(
    overrides?: CallOverrides
  ): Promise<AllThingsBox.CoolStructStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testInput(
    _someString: string,
    _anyNumber: BigNumberish,
    _testAddress: string,
    _moreArray: string[],
    _aCoolStruct: AllThingsBox.CoolStructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aPublicString(overrides?: CallOverrides): Promise<string>;

    getAddress(overrides?: CallOverrides): Promise<string>;

    getArray(overrides?: CallOverrides): Promise<string[]>;

    getInteger(overrides?: CallOverrides): Promise<BigNumber>;

    getString(overrides?: CallOverrides): Promise<string>;

    getStruct(
      overrides?: CallOverrides
    ): Promise<AllThingsBox.CoolStructStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    testInput(
      _someString: string,
      _anyNumber: BigNumberish,
      _testAddress: string,
      _moreArray: string[],
      _aCoolStruct: AllThingsBox.CoolStructStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Nothing(string)"(anyThing?: null): NothingEventFilter;
    Nothing(anyThing?: null): NothingEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    aPublicString(overrides?: CallOverrides): Promise<BigNumber>;

    getAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getArray(overrides?: CallOverrides): Promise<BigNumber>;

    getInteger(overrides?: CallOverrides): Promise<BigNumber>;

    getString(overrides?: CallOverrides): Promise<BigNumber>;

    getStruct(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testInput(
      _someString: string,
      _anyNumber: BigNumberish,
      _testAddress: string,
      _moreArray: string[],
      _aCoolStruct: AllThingsBox.CoolStructStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aPublicString(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getArray(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInteger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getString(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStruct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testInput(
      _someString: string,
      _anyNumber: BigNumberish,
      _testAddress: string,
      _moreArray: string[],
      _aCoolStruct: AllThingsBox.CoolStructStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
