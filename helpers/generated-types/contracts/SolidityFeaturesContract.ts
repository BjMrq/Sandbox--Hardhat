/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SolidityFeaturesContractInterface extends utils.Interface {
  functions: {
    "getTestBool()": FunctionFragment;
    "getTestMapping(string)": FunctionFragment;
    "testBool()": FunctionFragment;
    "testEvent(uint256,string)": FunctionFragment;
    "testMapping(string)": FunctionFragment;
    "testRevert()": FunctionFragment;
    "updateTestBool(bool)": FunctionFragment;
    "updateTestMapping(string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getTestBool"
      | "getTestMapping"
      | "testBool"
      | "testEvent"
      | "testMapping"
      | "testRevert"
      | "updateTestBool"
      | "updateTestMapping"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTestBool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTestMapping",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "testBool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testEvent",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "testMapping",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTestBool",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTestMapping",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTestBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTestMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testRevert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTestBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTestMapping",
    data: BytesLike
  ): Result;

  events: {
    "TestEvent(uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TestEvent"): EventFragment;
}

export interface TestEventEventObject {
  num: BigNumber;
  str: string;
}
export type TestEventEvent = TypedEvent<
  [BigNumber, string],
  TestEventEventObject
>;

export type TestEventEventFilter = TypedEventFilter<TestEventEvent>;

export interface SolidityFeaturesContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SolidityFeaturesContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTestBool(overrides?: CallOverrides): Promise<[boolean]>;

    getTestMapping(
      _testKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    testBool(overrides?: CallOverrides): Promise<[boolean]>;

    testEvent(
      _num: PromiseOrValue<BigNumberish>,
      _str: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    testRevert(overrides?: CallOverrides): Promise<[void]>;

    updateTestBool(
      _testBool: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTestMapping(
      _testKey: PromiseOrValue<string>,
      _testVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getTestBool(overrides?: CallOverrides): Promise<boolean>;

  getTestMapping(
    _testKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testBool(overrides?: CallOverrides): Promise<boolean>;

  testEvent(
    _num: PromiseOrValue<BigNumberish>,
    _str: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testMapping(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testRevert(overrides?: CallOverrides): Promise<void>;

  updateTestBool(
    _testBool: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTestMapping(
    _testKey: PromiseOrValue<string>,
    _testVal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getTestBool(overrides?: CallOverrides): Promise<boolean>;

    getTestMapping(
      _testKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testBool(overrides?: CallOverrides): Promise<boolean>;

    testEvent(
      _num: PromiseOrValue<BigNumberish>,
      _str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    testMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testRevert(overrides?: CallOverrides): Promise<void>;

    updateTestBool(
      _testBool: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTestMapping(
      _testKey: PromiseOrValue<string>,
      _testVal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TestEvent(uint256,string)"(num?: null, str?: null): TestEventEventFilter;
    TestEvent(num?: null, str?: null): TestEventEventFilter;
  };

  estimateGas: {
    getTestBool(overrides?: CallOverrides): Promise<BigNumber>;

    getTestMapping(
      _testKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testBool(overrides?: CallOverrides): Promise<BigNumber>;

    testEvent(
      _num: PromiseOrValue<BigNumberish>,
      _str: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testRevert(overrides?: CallOverrides): Promise<BigNumber>;

    updateTestBool(
      _testBool: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTestMapping(
      _testKey: PromiseOrValue<string>,
      _testVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTestBool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTestMapping(
      _testKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testBool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testEvent(
      _num: PromiseOrValue<BigNumberish>,
      _str: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testRevert(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateTestBool(
      _testBool: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTestMapping(
      _testKey: PromiseOrValue<string>,
      _testVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
