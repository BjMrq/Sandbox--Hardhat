/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AllThingsBox,
  AllThingsBoxInterface,
} from "../../../contracts/ColorBox.sol/AllThingsBox";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "initialColor",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "newValue",
        type: "string",
      },
    ],
    name: "ColorChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "anyThing",
        type: "string",
      },
    ],
    name: "Nothing",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newColor",
        type: "string",
      },
    ],
    name: "changeColor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newColor",
        type: "string",
      },
    ],
    name: "changeColorDryRun",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getColor",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "someString",
        type: "string",
      },
      {
        internalType: "uint112",
        name: "anyNumber",
        type: "uint112",
      },
      {
        internalType: "string[]",
        name: "moreArray",
        type: "string[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "coolName",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "coolLevel",
            type: "uint256",
          },
        ],
        internalType: "struct AllThingsBox.CoolStruct",
        name: "fancyStruct",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "string",
                name: "coolName",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "coolLevel",
                type: "uint256",
              },
            ],
            internalType: "struct AllThingsBox.CoolStruct",
            name: "coolBase",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "coolLevelSquared",
            type: "uint256",
          },
        ],
        internalType: "struct AllThingsBox.CoolerStruct",
        name: "fancierStruct",
        type: "tuple",
      },
    ],
    name: "testInput",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000a5e38038062000a5e833981016040819052620000349162000168565b6200003f336200005c565b805162000054906001906020840190620000ac565b505062000281565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620000ba9062000244565b90600052602060002090601f016020900481019282620000de576000855562000129565b82601f10620000f957805160ff191683800117855562000129565b8280016001018555821562000129579182015b82811115620001295782518255916020019190600101906200010c565b50620001379291506200013b565b5090565b5b808211156200013757600081556001016200013c565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200017c57600080fd5b82516001600160401b03808211156200019457600080fd5b818501915085601f830112620001a957600080fd5b815181811115620001be57620001be62000152565b604051601f8201601f19908116603f01168101908382118183101715620001e957620001e962000152565b8160405282815288868487010111156200020257600080fd5b600093505b8284101562000226578484018601518185018701529285019262000207565b82841115620002385760008684830101525b98975050505050505050565b600181811c908216806200025957607f821691505b602082108114156200027b57634e487b7160e01b600052602260045260246000fd5b50919050565b6107cd80620002916000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100b25780639a86139b146100d2578063ac7a25ee146100e7578063f2fde38b146100fa57600080fd5b806330d480d3146100825780636aa2afd514610097578063715018a6146100aa575b600080fd5b610095610090366004610557565b61010d565b005b6100956100a5366004610637565b610196565b61009561020a565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100da610240565b6040516100c99190610679565b6100956100f5366004610637565b6102d2565b6100956101083660046106ce565b61032d565b6000546001600160a01b031633146101405760405162461bcd60e51b8152600401610137906106fe565b60405180910390fd5b7ffb325292c62ed319cf84976eb8065f1819f1a7876aa2855fbf5d976850836cc160405161018590602080825260039082015262776f6160e81b604082015260600190565b60405180910390a150505050505050565b6000546001600160a01b031633146101c05760405162461bcd60e51b8152600401610137906106fe565b6101cc60018383610418565b507fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516101fe929190610733565b60405180910390a15050565b6000546001600160a01b031633146102345760405162461bcd60e51b8152600401610137906106fe565b61023e60006103c8565b565b60606001805461024f90610762565b80601f016020809104026020016040519081016040528092919081815260200182805461027b90610762565b80156102c85780601f1061029d576101008083540402835291602001916102c8565b820191906000526020600020905b8154815290600101906020018083116102ab57829003601f168201915b5050505050905090565b6000546001600160a01b031633146102fc5760405162461bcd60e51b8152600401610137906106fe565b7fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516101fe929190610733565b6000546001600160a01b031633146103575760405162461bcd60e51b8152600401610137906106fe565b6001600160a01b0381166103bc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610137565b6103c5816103c8565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805461042490610762565b90600052602060002090601f016020900481019282610446576000855561048c565b82601f1061045f5782800160ff1982351617855561048c565b8280016001018555821561048c579182015b8281111561048c578235825591602001919060010190610471565b5061049892915061049c565b5090565b5b80821115610498576000815560010161049d565b60008083601f8401126104c357600080fd5b50813567ffffffffffffffff8111156104db57600080fd5b6020830191508360208285010111156104f357600080fd5b9250929050565b60008083601f84011261050c57600080fd5b50813567ffffffffffffffff81111561052457600080fd5b6020830191508360208260051b85010111156104f357600080fd5b60006040828403121561055157600080fd5b50919050565b600080600080600080600060a0888a03121561057257600080fd5b873567ffffffffffffffff8082111561058a57600080fd5b6105968b838c016104b1565b909950975060208a013591506dffffffffffffffffffffffffffff821682146105be57600080fd5b909550604089013590808211156105d457600080fd5b6105e08b838c016104fa565b909650945060608a01359150808211156105f957600080fd5b6106058b838c0161053f565b935060808a013591508082111561061b57600080fd5b506106288a828b0161053f565b91505092959891949750929550565b6000806020838503121561064a57600080fd5b823567ffffffffffffffff81111561066157600080fd5b61066d858286016104b1565b90969095509350505050565b600060208083528351808285015260005b818110156106a65785810183015185820160400152820161068a565b818111156106b8576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156106e057600080fd5b81356001600160a01b03811681146106f757600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600181811c9082168061077657607f821691505b6020821081141561055157634e487b7160e01b600052602260045260246000fdfea26469706673582212208d02b140cffab0b2e0843865e695aa1f98c6a3146b23d8aa738d53fbdb91024064736f6c63430008090033";

type AllThingsBoxConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AllThingsBoxConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AllThingsBox__factory extends ContractFactory {
  constructor(...args: AllThingsBoxConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    initialColor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AllThingsBox> {
    return super.deploy(initialColor, overrides || {}) as Promise<AllThingsBox>;
  }
  override getDeployTransaction(
    initialColor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(initialColor, overrides || {});
  }
  override attach(address: string): AllThingsBox {
    return super.attach(address) as AllThingsBox;
  }
  override connect(signer: Signer): AllThingsBox__factory {
    return super.connect(signer) as AllThingsBox__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AllThingsBoxInterface {
    return new utils.Interface(_abi) as AllThingsBoxInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AllThingsBox {
    return new Contract(address, _abi, signerOrProvider) as AllThingsBox;
  }
}
