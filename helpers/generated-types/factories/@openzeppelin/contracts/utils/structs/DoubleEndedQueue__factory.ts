/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  DoubleEndedQueue,
  DoubleEndedQueueInterface,
} from "../../../../../@openzeppelin/contracts/utils/structs/DoubleEndedQueue";

const _abi = [
  {
    inputs: [],
    name: "Empty",
    type: "error",
  },
  {
    inputs: [],
    name: "OutOfBounds",
    type: "error",
  },
];

const _bytecode =
  "0x000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000";

type DoubleEndedQueueConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DoubleEndedQueueConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DoubleEndedQueue__factory extends ContractFactory {
  constructor(...args: DoubleEndedQueueConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DoubleEndedQueue> {
    return super.deploy(overrides || {}) as Promise<DoubleEndedQueue>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DoubleEndedQueue {
    return super.attach(address) as DoubleEndedQueue;
  }
  override connect(signer: Signer): DoubleEndedQueue__factory {
    return super.connect(signer) as DoubleEndedQueue__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DoubleEndedQueueInterface {
    return new utils.Interface(_abi) as DoubleEndedQueueInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DoubleEndedQueue {
    return new Contract(address, _abi, signerOrProvider) as DoubleEndedQueue;
  }
}
