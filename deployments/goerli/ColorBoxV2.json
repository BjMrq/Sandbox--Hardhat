{
  "address": "0xAc0855759DcC38A15F67B167AF23bb129d25C54A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "ColorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "ShouldRevertChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newColor",
          "type": "string"
        }
      ],
      "name": "changeColorCouldRevert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newColor",
          "type": "string"
        }
      ],
      "name": "changeColorDryRun",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newColor",
          "type": "string"
        }
      ],
      "name": "changeColorOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "changeValueNoRevert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_testKey",
          "type": "string"
        }
      ],
      "name": "getMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "initialColor",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isV2",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldRevert",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "switchShouldRevert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "testMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testRevert",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_testKey",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_testVal",
          "type": "uint256"
        }
      ],
      "name": "updateMapping",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x407d8cb0a7c9e64cc762a3d444f07d2b93794f4fb0985c17707b1bffdb77060d",
  "receipt": {
    "to": null,
    "from": "0x1bCa0bf5e8796e45F4F25927AaB9BF2991fd3a5B",
    "contractAddress": "0xAc0855759DcC38A15F67B167AF23bb129d25C54A",
    "transactionIndex": 0,
    "gasUsed": "698532",
    "logsBloom": "0x
    "blockHash": "0xc00268fbb738ecec9fec77d92dab9d25992419f6b179350b85b4105dd11dfe35",
    "transactionHash": "0x407d8cb0a7c9e64cc762a3d444f07d2b93794f4fb0985c17707b1bffdb77060d",
    "logs": [],
    "blockNumber": 7502746,
    "cumulativeGasUsed": "698532",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "66cbba5961c3cadaa1a6f39af7f1a5ef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"ColorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"ShouldRevertChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newColor\",\"type\":\"string\"}],\"name\":\"changeColorCouldRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newColor\",\"type\":\"string\"}],\"name\":\"changeColorDryRun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newColor\",\"type\":\"string\"}],\"name\":\"changeColorOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"changeValueNoRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_testKey\",\"type\":\"string\"}],\"name\":\"getMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initialColor\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldRevert\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchShouldRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"testMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testRevert\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_testKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_testVal\",\"type\":\"uint256\"}],\"name\":\"updateMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mr Tumeric A. Gardner\",\"custom:experimental\":\"This is an experimental contract.\",\"details\":\"All function calls are currently implemented without..\",\"kind\":\"dev\",\"methods\":{\"changeColorCouldRevert(string)\":{\"details\":\"The Alexandr N. Tetearing algorithm could increase precision\",\"params\":{\"newColor\":\"The new color to be stored in the box state\"}},\"changeColorDryRun(string)\":{\"custom:event-only\":\"This function simply emit an event.\",\"details\":\"The Alexandr N. Tetearing algorithm could increase precision\",\"params\":{\"newColor\":\"The new color to be stored in the box state\"}},\"changeColorOwner(string)\":{\"details\":\"The Alexandr N. Tetearing algorithm could increase precision\",\"params\":{\"newColor\":\"The new color to be stored in the box state\"}},\"getColor()\":{\"details\":\"Returns only a string.\",\"returns\":{\"_0\":\"The current color of in the box state\"}},\"getVersion()\":{\"details\":\"Returns only a string.\",\"returns\":{\"_0\":\"The current version of the contract\"}},\"isV2()\":{\"details\":\"Returns an acknowledgment that it is a v2 implementation.\",\"returns\":{\"_0\":\"An acknowledgment that it is a v2 implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A box containing some hex color\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeColorCouldRevert(string)\":{\"notice\":\"Allow to change the color stored in the BoxOnly the Owner can call this function\"},\"changeColorDryRun(string)\":{\"notice\":\"Allow to simulate changing the color stored in the Box\"},\"changeColorOwner(string)\":{\"notice\":\"Allow to change the color stored in the BoxOnly the Owner can call this function\"},\"getColor()\":{\"notice\":\"Returns current color in the box.\"},\"getVersion()\":{\"notice\":\"Returns current version of the contract.\"},\"isV2()\":{\"notice\":\"A v2 implementation.\"}},\"notice\":\"You can use this contract for only the most basic simulation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ColorBoxV2.sol\":\"ColorBoxV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/ColorBoxV1.sol\":{\"content\":\"// contracts/Box.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @title A box containing some hex color\\n/// @author Mr Tumeric A. Gardner\\n/// @notice You can use this contract for only the most basic simulation\\n/// @dev All function calls are currently implemented without..\\n/// @custom:experimental This is an experimental contract.\\ncontract ColorBoxV1 is Initializable, OwnableUpgradeable {\\n  string private color;\\n  bool public shouldRevert;\\n  mapping (string => uint) public testMapping;\\n\\n\\n  event ColorChanged(string newValue);\\n  event ShouldRevertChanged(bool newValue);\\n\\n  function initialize(string memory initialColor) public initializer {\\n    __Context_init();\\n\\n    color = initialColor;\\n    shouldRevert = false;\\n  }\\n\\n  function updateMapping(string memory _testKey, uint _testVal) public {\\n    testMapping[_testKey] = _testVal;\\n  }\\n\\n  function getMapping(string memory _testKey) public view returns (uint) {\\n    return testMapping[_testKey];\\n  }\\n\\n  function testRevert() pure public {\\n    require(false, \\\"Call has been reverted!\\\");\\n  }\\n\\n  function switchShouldRevert() public onlyOwner {\\n    shouldRevert = !shouldRevert;\\n    emit ShouldRevertChanged(shouldRevert);\\n  }\\n\\n  function changeValueNoRevert(string calldata newValue) public {\\n    color = newValue;\\n    emit ColorChanged(newValue);\\n  }\\n\\n\\n  /// @notice Allow to change the color stored in the Box\\n  /// @notice Only the Owner can call this function\\n  /// @dev The Alexandr N. Tetearing algorithm could increase precision\\n  /// @param newColor The new color to be stored in the box state\\n  function changeColorCouldRevert(string calldata newColor) public {\\n    require(!shouldRevert, \\\"Set to revert\\\");\\n    color = newColor;\\n    emit ColorChanged(newColor);\\n  }\\n\\n  /// @notice Allow to change the color stored in the Box\\n  /// @notice Only the Owner can call this function\\n  /// @dev The Alexandr N. Tetearing algorithm could increase precision\\n  /// @param newColor The new color to be stored in the box state\\n  function changeColorOwner(string calldata newColor) public onlyOwner {\\n    color = newColor;\\n    emit ColorChanged(newColor);\\n  }\\n\\n  /// @notice Allow to simulate changing the color stored in the Box\\n  /// @dev The Alexandr N. Tetearing algorithm could increase precision\\n  /// @param newColor The new color to be stored in the box state\\n  /// @custom:event-only This function simply emit an event.\\n  function changeColorDryRun(string calldata newColor) public {\\n    emit ColorChanged(newColor);\\n  }\\n\\n  /// @notice Returns current color in the box.\\n  /// @dev Returns only a string.\\n  /// @return The current color of in the box state\\n  function getColor() public view returns (string memory) {\\n    require(!shouldRevert, \\\"Set to revert\\\");\\n    return color;\\n  }\\n\\n  /// @notice Returns current version of the contract.\\n  /// @dev Returns only a string.\\n  /// @return The current version of the contract\\n  function getVersion() virtual public pure returns (string memory) {\\n    return \\\"V1\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x510cd9cce85999e58e1f39cbdbc64f7ab314bdea281b73a7e6f31a2ff6e7a6f7\",\"license\":\"MIT\"},\"contracts/ColorBoxV2.sol\":{\"content\":\"// contracts/Box.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ColorBoxV1.sol\\\";\\n\\n/// @title A box containing some hex color\\n/// @author Mr Tumeric A. Gardner\\n/// @notice You can use this contract for only the most basic simulation\\n/// @dev All function calls are currently implemented without..\\n/// @custom:experimental This is an experimental contract.\\ncontract ColorBoxV2 is ColorBoxV1 {\\n  /// @notice A v2 implementation.\\n  /// @dev Returns an acknowledgment that it is a v2 implementation.\\n  /// @return An acknowledgment that it is a v2 implementation.\\n  function isV2() public pure returns (bool) {\\n    return true;\\n  }\\n  \\n\\n  /// @notice Returns current version of the contract.\\n  /// @dev Returns only a string.\\n  /// @return The current version of the contract\\n  function getVersion() override public pure returns (string memory) {\\n    return \\\"V2\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x44d75b5b5de1cd76194a1c47e8a056d930d2eb5008c9ff19736b6ccc5fd5b26a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610bab806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063b85b299511610071578063b85b299514610215578063d3072d8214610228578063e186e72714610235578063f2fde38b14610248578063f62d18881461025b57600080fd5b80638da5cb5b146101d75780639a86139b146101f2578063a26388bb146101fa578063ac7a25ee1461020257600080fd5b806315b60141116100de57806315b601411461017e5780632d94a2d0146101a95780635f606662146101bc578063715018a6146101cf57600080fd5b80630cab219a146101105780630d8e6e2c1461012557806311f45e9c14610155578063142c9eb514610176575b600080fd5b61012361011e36600461098b565b61026e565b005b6040805180820190915260028152612b1960f11b60208201525b60405161014c9190610ac1565b60405180910390f35b6101686101633660046109f8565b610300565b60405190815260200161014c565b610123610328565b61016861018c3660046109f8565b805160208183018101805160678252928201919093012091525481565b60015b604051901515815260200161014c565b6101236101ca366004610a33565b61037d565b6101236103a2565b6033546040516001600160a01b03909116815260200161014c565b61013f6103b6565b61012361048c565b61012361021036600461098b565b6104d4565b61012361022336600461098b565b6102b6565b6066546101ac9060ff1681565b61012361024336600461098b565b610505565b61012361025636600461095d565b61050d565b6101236102693660046109f8565b610586565b60665460ff16156102b65760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064015b60405180910390fd5b6102c2606583836107c9565b507fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b60405180910390a15050565b60006067826040516103129190610a76565b9081526020016040518091039020549050919050565b6103306106b2565b6066805460ff8082161560ff1990921682179092556040519116151581527f88e95cf2f314e458491f98f3be8f296ee704bfc5b2cbeddcda73b61d44c9060b9060200160405180910390a1565b8060678360405161038e9190610a76565b908152604051908190036020019020555050565b6103aa6106b2565b6103b4600061070c565b565b60665460609060ff16156103fc5760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064016102ad565b6065805461040990610b24565b80601f016020809104026020016040519081016040528092919081815260200182805461043590610b24565b80156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b5050505050905090565b60405162461bcd60e51b815260206004820152601760248201527f43616c6c20686173206265656e2072657665727465642100000000000000000060448201526064016102ad565b7fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b6102b66106b2565b6105156106b2565b6001600160a01b03811661057a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ad565b6105838161070c565b50565b600054610100900460ff16158080156105a65750600054600160ff909116105b806105c05750303b1580156105c0575060005460ff166001145b6106235760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102ad565b6000805460ff191660011790558015610646576000805461ff0019166101001790555b61064e61075e565b815161066190606590602085019061084d565b506066805460ff1916905580156106ae576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016102f4565b5050565b6033546001600160a01b031633146103b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ad565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166103b45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016102ad565b8280546107d590610b24565b90600052602060002090601f0160209004810192826107f7576000855561083d565b82601f106108105782800160ff1982351617855561083d565b8280016001018555821561083d579182015b8281111561083d578235825591602001919060010190610822565b506108499291506108c1565b5090565b82805461085990610b24565b90600052602060002090601f01602090048101928261087b576000855561083d565b82601f1061089457805160ff191683800117855561083d565b8280016001018555821561083d579182015b8281111561083d5782518255916020019190600101906108a6565b5b8082111561084957600081556001016108c2565b600082601f8301126108e6578081fd5b813567ffffffffffffffff8082111561090157610901610b5f565b604051601f8301601f19908116603f0116810190828211818310171561092957610929610b5f565b81604052838152866020858801011115610941578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561096e578081fd5b81356001600160a01b0381168114610984578182fd5b9392505050565b6000806020838503121561099d578081fd5b823567ffffffffffffffff808211156109b4578283fd5b818501915085601f8301126109c7578283fd5b8135818111156109d5578384fd5b8660208285010111156109e6578384fd5b60209290920196919550909350505050565b600060208284031215610a09578081fd5b813567ffffffffffffffff811115610a1f578182fd5b610a2b848285016108d6565b949350505050565b60008060408385031215610a45578182fd5b823567ffffffffffffffff811115610a5b578283fd5b610a67858286016108d6565b95602094909401359450505050565b60008251610a88818460208701610af4565b9190910192915050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020815260008251806020840152610ae0816040850160208701610af4565b601f01601f19169190910160400192915050565b60005b83811015610b0f578181015183820152602001610af7565b83811115610b1e576000848401525b50505050565b600181811c90821680610b3857607f821691505b60208210811415610b5957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220d236d7401c8f60813bde49a6cdc8a06041433d82405214b1f60e987981fc722364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063b85b299511610071578063b85b299514610215578063d3072d8214610228578063e186e72714610235578063f2fde38b14610248578063f62d18881461025b57600080fd5b80638da5cb5b146101d75780639a86139b146101f2578063a26388bb146101fa578063ac7a25ee1461020257600080fd5b806315b60141116100de57806315b601411461017e5780632d94a2d0146101a95780635f606662146101bc578063715018a6146101cf57600080fd5b80630cab219a146101105780630d8e6e2c1461012557806311f45e9c14610155578063142c9eb514610176575b600080fd5b61012361011e36600461098b565b61026e565b005b6040805180820190915260028152612b1960f11b60208201525b60405161014c9190610ac1565b60405180910390f35b6101686101633660046109f8565b610300565b60405190815260200161014c565b610123610328565b61016861018c3660046109f8565b805160208183018101805160678252928201919093012091525481565b60015b604051901515815260200161014c565b6101236101ca366004610a33565b61037d565b6101236103a2565b6033546040516001600160a01b03909116815260200161014c565b61013f6103b6565b61012361048c565b61012361021036600461098b565b6104d4565b61012361022336600461098b565b6102b6565b6066546101ac9060ff1681565b61012361024336600461098b565b610505565b61012361025636600461095d565b61050d565b6101236102693660046109f8565b610586565b60665460ff16156102b65760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064015b60405180910390fd5b6102c2606583836107c9565b507fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b60405180910390a15050565b60006067826040516103129190610a76565b9081526020016040518091039020549050919050565b6103306106b2565b6066805460ff8082161560ff1990921682179092556040519116151581527f88e95cf2f314e458491f98f3be8f296ee704bfc5b2cbeddcda73b61d44c9060b9060200160405180910390a1565b8060678360405161038e9190610a76565b908152604051908190036020019020555050565b6103aa6106b2565b6103b4600061070c565b565b60665460609060ff16156103fc5760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064016102ad565b6065805461040990610b24565b80601f016020809104026020016040519081016040528092919081815260200182805461043590610b24565b80156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b5050505050905090565b60405162461bcd60e51b815260206004820152601760248201527f43616c6c20686173206265656e2072657665727465642100000000000000000060448201526064016102ad565b7fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b6102b66106b2565b6105156106b2565b6001600160a01b03811661057a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ad565b6105838161070c565b50565b600054610100900460ff16158080156105a65750600054600160ff909116105b806105c05750303b1580156105c0575060005460ff166001145b6106235760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102ad565b6000805460ff191660011790558015610646576000805461ff0019166101001790555b61064e61075e565b815161066190606590602085019061084d565b506066805460ff1916905580156106ae576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016102f4565b5050565b6033546001600160a01b031633146103b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ad565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166103b45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016102ad565b8280546107d590610b24565b90600052602060002090601f0160209004810192826107f7576000855561083d565b82601f106108105782800160ff1982351617855561083d565b8280016001018555821561083d579182015b8281111561083d578235825591602001919060010190610822565b506108499291506108c1565b5090565b82805461085990610b24565b90600052602060002090601f01602090048101928261087b576000855561083d565b82601f1061089457805160ff191683800117855561083d565b8280016001018555821561083d579182015b8281111561083d5782518255916020019190600101906108a6565b5b8082111561084957600081556001016108c2565b600082601f8301126108e6578081fd5b813567ffffffffffffffff8082111561090157610901610b5f565b604051601f8301601f19908116603f0116810190828211818310171561092957610929610b5f565b81604052838152866020858801011115610941578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561096e578081fd5b81356001600160a01b0381168114610984578182fd5b9392505050565b6000806020838503121561099d578081fd5b823567ffffffffffffffff808211156109b4578283fd5b818501915085601f8301126109c7578283fd5b8135818111156109d5578384fd5b8660208285010111156109e6578384fd5b60209290920196919550909350505050565b600060208284031215610a09578081fd5b813567ffffffffffffffff811115610a1f578182fd5b610a2b848285016108d6565b949350505050565b60008060408385031215610a45578182fd5b823567ffffffffffffffff811115610a5b578283fd5b610a67858286016108d6565b95602094909401359450505050565b60008251610a88818460208701610af4565b9190910192915050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020815260008251806020840152610ae0816040850160208701610af4565b601f01601f19169190910160400192915050565b60005b83811015610b0f578181015183820152602001610af7565b83811115610b1e576000848401525b50505050565b600181811c90821680610b3857607f821691505b60208210811415610b5957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220d236d7401c8f60813bde49a6cdc8a06041433d82405214b1f60e987981fc722364736f6c63430008040033",
  "devdoc": {
    "author": "Mr Tumeric A. Gardner",
    "custom:experimental": "This is an experimental contract.",
    "details": "All function calls are currently implemented without..",
    "kind": "dev",
    "methods": {
      "changeColorCouldRevert(string)": {
        "details": "The Alexandr N. Tetearing algorithm could increase precision",
        "params": {
          "newColor": "The new color to be stored in the box state"
        }
      },
      "changeColorDryRun(string)": {
        "custom:event-only": "This function simply emit an event.",
        "details": "The Alexandr N. Tetearing algorithm could increase precision",
        "params": {
          "newColor": "The new color to be stored in the box state"
        }
      },
      "changeColorOwner(string)": {
        "details": "The Alexandr N. Tetearing algorithm could increase precision",
        "params": {
          "newColor": "The new color to be stored in the box state"
        }
      },
      "getColor()": {
        "details": "Returns only a string.",
        "returns": {
          "_0": "The current color of in the box state"
        }
      },
      "getVersion()": {
        "details": "Returns only a string.",
        "returns": {
          "_0": "The current version of the contract"
        }
      },
      "isV2()": {
        "details": "Returns an acknowledgment that it is a v2 implementation.",
        "returns": {
          "_0": "An acknowledgment that it is a v2 implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A box containing some hex color",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeColorCouldRevert(string)": {
        "notice": "Allow to change the color stored in the BoxOnly the Owner can call this function"
      },
      "changeColorDryRun(string)": {
        "notice": "Allow to simulate changing the color stored in the Box"
      },
      "changeColorOwner(string)": {
        "notice": "Allow to change the color stored in the BoxOnly the Owner can call this function"
      },
      "getColor()": {
        "notice": "Returns current color in the box."
      },
      "getVersion()": {
        "notice": "Returns current version of the contract."
      },
      "isV2()": {
        "notice": "A v2 implementation."
      }
    },
    "notice": "You can use this contract for only the most basic simulation",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 566,
        "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 578,
        "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
        "label": "color",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 580,
        "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
        "label": "shouldRevert",
        "offset": 0,
        "slot": "102",
        "type": "t_bool"
      },
      {
        "astId": 584,
        "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
        "label": "testMapping",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}