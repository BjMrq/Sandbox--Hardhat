{
  "0xab0e9d900de2299bdf5371fd1620af5f66238cd7de3ac42421eaef40e9fb4187": {
    "name": "ColorBoxV2",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "ColorBoxV2",
      "sourceName": "contracts/ColorBoxV2.sol",
      "abi": [
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "string",
              "name": "newValue",
              "type": "string"
            }
          ],
          "name": "ColorChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bool",
              "name": "newValue",
              "type": "bool"
            }
          ],
          "name": "ShouldRevertChanged",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "newColor",
              "type": "string"
            }
          ],
          "name": "changeColorCouldRevert",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "newColor",
              "type": "string"
            }
          ],
          "name": "changeColorDryRun",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "newColor",
              "type": "string"
            }
          ],
          "name": "changeColorOwner",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "newValue",
              "type": "string"
            }
          ],
          "name": "changeValueNoRevert",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getColor",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_testKey",
              "type": "string"
            }
          ],
          "name": "getMapping",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getVersion",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "initialColor",
              "type": "string"
            }
          ],
          "name": "initialize",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "isV2",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "shouldRevert",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "switchShouldRevert",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "name": "testMapping",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "testRevert",
          "outputs": [],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_testKey",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "_testVal",
              "type": "uint256"
            }
          ],
          "name": "updateMapping",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561001057600080fd5b50610bab806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063b85b299511610071578063b85b299514610215578063d3072d8214610228578063e186e72714610235578063f2fde38b14610248578063f62d18881461025b57600080fd5b80638da5cb5b146101d75780639a86139b146101f2578063a26388bb146101fa578063ac7a25ee1461020257600080fd5b806315b60141116100de57806315b601411461017e5780632d94a2d0146101a95780635f606662146101bc578063715018a6146101cf57600080fd5b80630cab219a146101105780630d8e6e2c1461012557806311f45e9c14610155578063142c9eb514610176575b600080fd5b61012361011e36600461098b565b61026e565b005b6040805180820190915260028152612b1960f11b60208201525b60405161014c9190610ac1565b60405180910390f35b6101686101633660046109f8565b610300565b60405190815260200161014c565b610123610328565b61016861018c3660046109f8565b805160208183018101805160678252928201919093012091525481565b60015b604051901515815260200161014c565b6101236101ca366004610a33565b61037d565b6101236103a2565b6033546040516001600160a01b03909116815260200161014c565b61013f6103b6565b61012361048c565b61012361021036600461098b565b6104d4565b61012361022336600461098b565b6102b6565b6066546101ac9060ff1681565b61012361024336600461098b565b610505565b61012361025636600461095d565b61050d565b6101236102693660046109f8565b610586565b60665460ff16156102b65760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064015b60405180910390fd5b6102c2606583836107c9565b507fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b60405180910390a15050565b60006067826040516103129190610a76565b9081526020016040518091039020549050919050565b6103306106b2565b6066805460ff8082161560ff1990921682179092556040519116151581527f88e95cf2f314e458491f98f3be8f296ee704bfc5b2cbeddcda73b61d44c9060b9060200160405180910390a1565b8060678360405161038e9190610a76565b908152604051908190036020019020555050565b6103aa6106b2565b6103b4600061070c565b565b60665460609060ff16156103fc5760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064016102ad565b6065805461040990610b24565b80601f016020809104026020016040519081016040528092919081815260200182805461043590610b24565b80156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b5050505050905090565b60405162461bcd60e51b815260206004820152601760248201527f43616c6c20686173206265656e2072657665727465642100000000000000000060448201526064016102ad565b7fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b6102b66106b2565b6105156106b2565b6001600160a01b03811661057a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ad565b6105838161070c565b50565b600054610100900460ff16158080156105a65750600054600160ff909116105b806105c05750303b1580156105c0575060005460ff166001145b6106235760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102ad565b6000805460ff191660011790558015610646576000805461ff0019166101001790555b61064e61075e565b815161066190606590602085019061084d565b506066805460ff1916905580156106ae576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016102f4565b5050565b6033546001600160a01b031633146103b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ad565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166103b45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016102ad565b8280546107d590610b24565b90600052602060002090601f0160209004810192826107f7576000855561083d565b82601f106108105782800160ff1982351617855561083d565b8280016001018555821561083d579182015b8281111561083d578235825591602001919060010190610822565b506108499291506108c1565b5090565b82805461085990610b24565b90600052602060002090601f01602090048101928261087b576000855561083d565b82601f1061089457805160ff191683800117855561083d565b8280016001018555821561083d579182015b8281111561083d5782518255916020019190600101906108a6565b5b8082111561084957600081556001016108c2565b600082601f8301126108e6578081fd5b813567ffffffffffffffff8082111561090157610901610b5f565b604051601f8301601f19908116603f0116810190828211818310171561092957610929610b5f565b81604052838152866020858801011115610941578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561096e578081fd5b81356001600160a01b0381168114610984578182fd5b9392505050565b6000806020838503121561099d578081fd5b823567ffffffffffffffff808211156109b4578283fd5b818501915085601f8301126109c7578283fd5b8135818111156109d5578384fd5b8660208285010111156109e6578384fd5b60209290920196919550909350505050565b600060208284031215610a09578081fd5b813567ffffffffffffffff811115610a1f578182fd5b610a2b848285016108d6565b949350505050565b60008060408385031215610a45578182fd5b823567ffffffffffffffff811115610a5b578283fd5b610a67858286016108d6565b95602094909401359450505050565b60008251610a88818460208701610af4565b9190910192915050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020815260008251806020840152610ae0816040850160208701610af4565b601f01601f19169190910160400192915050565b60005b83811015610b0f578181015183820152602001610af7565b83811115610b1e576000848401525b50505050565b600181811c90821680610b3857607f821691505b60208210811415610b5957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220d236d7401c8f60813bde49a6cdc8a06041433d82405214b1f60e987981fc722364736f6c63430008040033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063b85b299511610071578063b85b299514610215578063d3072d8214610228578063e186e72714610235578063f2fde38b14610248578063f62d18881461025b57600080fd5b80638da5cb5b146101d75780639a86139b146101f2578063a26388bb146101fa578063ac7a25ee1461020257600080fd5b806315b60141116100de57806315b601411461017e5780632d94a2d0146101a95780635f606662146101bc578063715018a6146101cf57600080fd5b80630cab219a146101105780630d8e6e2c1461012557806311f45e9c14610155578063142c9eb514610176575b600080fd5b61012361011e36600461098b565b61026e565b005b6040805180820190915260028152612b1960f11b60208201525b60405161014c9190610ac1565b60405180910390f35b6101686101633660046109f8565b610300565b60405190815260200161014c565b610123610328565b61016861018c3660046109f8565b805160208183018101805160678252928201919093012091525481565b60015b604051901515815260200161014c565b6101236101ca366004610a33565b61037d565b6101236103a2565b6033546040516001600160a01b03909116815260200161014c565b61013f6103b6565b61012361048c565b61012361021036600461098b565b6104d4565b61012361022336600461098b565b6102b6565b6066546101ac9060ff1681565b61012361024336600461098b565b610505565b61012361025636600461095d565b61050d565b6101236102693660046109f8565b610586565b60665460ff16156102b65760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064015b60405180910390fd5b6102c2606583836107c9565b507fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b60405180910390a15050565b60006067826040516103129190610a76565b9081526020016040518091039020549050919050565b6103306106b2565b6066805460ff8082161560ff1990921682179092556040519116151581527f88e95cf2f314e458491f98f3be8f296ee704bfc5b2cbeddcda73b61d44c9060b9060200160405180910390a1565b8060678360405161038e9190610a76565b908152604051908190036020019020555050565b6103aa6106b2565b6103b4600061070c565b565b60665460609060ff16156103fc5760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064016102ad565b6065805461040990610b24565b80601f016020809104026020016040519081016040528092919081815260200182805461043590610b24565b80156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b5050505050905090565b60405162461bcd60e51b815260206004820152601760248201527f43616c6c20686173206265656e2072657665727465642100000000000000000060448201526064016102ad565b7fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b6102b66106b2565b6105156106b2565b6001600160a01b03811661057a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ad565b6105838161070c565b50565b600054610100900460ff16158080156105a65750600054600160ff909116105b806105c05750303b1580156105c0575060005460ff166001145b6106235760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102ad565b6000805460ff191660011790558015610646576000805461ff0019166101001790555b61064e61075e565b815161066190606590602085019061084d565b506066805460ff1916905580156106ae576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016102f4565b5050565b6033546001600160a01b031633146103b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ad565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166103b45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016102ad565b8280546107d590610b24565b90600052602060002090601f0160209004810192826107f7576000855561083d565b82601f106108105782800160ff1982351617855561083d565b8280016001018555821561083d579182015b8281111561083d578235825591602001919060010190610822565b506108499291506108c1565b5090565b82805461085990610b24565b90600052602060002090601f01602090048101928261087b576000855561083d565b82601f1061089457805160ff191683800117855561083d565b8280016001018555821561083d579182015b8281111561083d5782518255916020019190600101906108a6565b5b8082111561084957600081556001016108c2565b600082601f8301126108e6578081fd5b813567ffffffffffffffff8082111561090157610901610b5f565b604051601f8301601f19908116603f0116810190828211818310171561092957610929610b5f565b81604052838152866020858801011115610941578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561096e578081fd5b81356001600160a01b0381168114610984578182fd5b9392505050565b6000806020838503121561099d578081fd5b823567ffffffffffffffff808211156109b4578283fd5b818501915085601f8301126109c7578283fd5b8135818111156109d5578384fd5b8660208285010111156109e6578384fd5b60209290920196919550909350505050565b600060208284031215610a09578081fd5b813567ffffffffffffffff811115610a1f578182fd5b610a2b848285016108d6565b949350505050565b60008060408385031215610a45578182fd5b823567ffffffffffffffff811115610a5b578283fd5b610a67858286016108d6565b95602094909401359450505050565b60008251610a88818460208701610af4565b9190910192915050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020815260008251806020840152610ae0816040850160208701610af4565b601f01601f19169190910160400192915050565b60005b83811015610b0f578181015183820152602001610af7565b83811115610b1e576000848401525b50505050565b600181811c90821680610b3857607f821691505b60208210811415610b5957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220d236d7401c8f60813bde49a6cdc8a06041433d82405214b1f60e987981fc722364736f6c63430008040033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "author": "Mr Tumeric A. Gardner",
        "custom:experimental": "This is an experimental contract.",
        "details": "All function calls are currently implemented without..",
        "kind": "dev",
        "methods": {
          "changeColorCouldRevert(string)": {
            "details": "The Alexandr N. Tetearing algorithm could increase precision",
            "params": {
              "newColor": "The new color to be stored in the box state"
            }
          },
          "changeColorDryRun(string)": {
            "custom:event-only": "This function simply emit an event.",
            "details": "The Alexandr N. Tetearing algorithm could increase precision",
            "params": {
              "newColor": "The new color to be stored in the box state"
            }
          },
          "changeColorOwner(string)": {
            "details": "The Alexandr N. Tetearing algorithm could increase precision",
            "params": {
              "newColor": "The new color to be stored in the box state"
            }
          },
          "getColor()": {
            "details": "Returns only a string.",
            "returns": {
              "_0": "The current color of in the box state"
            }
          },
          "getVersion()": {
            "details": "Returns only a string.",
            "returns": {
              "_0": "The current version of the contract"
            }
          },
          "isV2()": {
            "details": "Returns an acknowledgment that it is a v2 implementation.",
            "returns": {
              "_0": "An acknowledgment that it is a v2 implementation."
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "title": "A box containing some hex color",
        "version": 1
      },
      "evm": {
        "bytecode": {
          "generatedSources": [],
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50610bab806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063b85b299511610071578063b85b299514610215578063d3072d8214610228578063e186e72714610235578063f2fde38b14610248578063f62d18881461025b57600080fd5b80638da5cb5b146101d75780639a86139b146101f2578063a26388bb146101fa578063ac7a25ee1461020257600080fd5b806315b60141116100de57806315b601411461017e5780632d94a2d0146101a95780635f606662146101bc578063715018a6146101cf57600080fd5b80630cab219a146101105780630d8e6e2c1461012557806311f45e9c14610155578063142c9eb514610176575b600080fd5b61012361011e36600461098b565b61026e565b005b6040805180820190915260028152612b1960f11b60208201525b60405161014c9190610ac1565b60405180910390f35b6101686101633660046109f8565b610300565b60405190815260200161014c565b610123610328565b61016861018c3660046109f8565b805160208183018101805160678252928201919093012091525481565b60015b604051901515815260200161014c565b6101236101ca366004610a33565b61037d565b6101236103a2565b6033546040516001600160a01b03909116815260200161014c565b61013f6103b6565b61012361048c565b61012361021036600461098b565b6104d4565b61012361022336600461098b565b6102b6565b6066546101ac9060ff1681565b61012361024336600461098b565b610505565b61012361025636600461095d565b61050d565b6101236102693660046109f8565b610586565b60665460ff16156102b65760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064015b60405180910390fd5b6102c2606583836107c9565b507fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b60405180910390a15050565b60006067826040516103129190610a76565b9081526020016040518091039020549050919050565b6103306106b2565b6066805460ff8082161560ff1990921682179092556040519116151581527f88e95cf2f314e458491f98f3be8f296ee704bfc5b2cbeddcda73b61d44c9060b9060200160405180910390a1565b8060678360405161038e9190610a76565b908152604051908190036020019020555050565b6103aa6106b2565b6103b4600061070c565b565b60665460609060ff16156103fc5760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064016102ad565b6065805461040990610b24565b80601f016020809104026020016040519081016040528092919081815260200182805461043590610b24565b80156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b5050505050905090565b60405162461bcd60e51b815260206004820152601760248201527f43616c6c20686173206265656e2072657665727465642100000000000000000060448201526064016102ad565b7fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b6102b66106b2565b6105156106b2565b6001600160a01b03811661057a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ad565b6105838161070c565b50565b600054610100900460ff16158080156105a65750600054600160ff909116105b806105c05750303b1580156105c0575060005460ff166001145b6106235760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102ad565b6000805460ff191660011790558015610646576000805461ff0019166101001790555b61064e61075e565b815161066190606590602085019061084d565b506066805460ff1916905580156106ae576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016102f4565b5050565b6033546001600160a01b031633146103b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ad565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166103b45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016102ad565b8280546107d590610b24565b90600052602060002090601f0160209004810192826107f7576000855561083d565b82601f106108105782800160ff1982351617855561083d565b8280016001018555821561083d579182015b8281111561083d578235825591602001919060010190610822565b506108499291506108c1565b5090565b82805461085990610b24565b90600052602060002090601f01602090048101928261087b576000855561083d565b82601f1061089457805160ff191683800117855561083d565b8280016001018555821561083d579182015b8281111561083d5782518255916020019190600101906108a6565b5b8082111561084957600081556001016108c2565b600082601f8301126108e6578081fd5b813567ffffffffffffffff8082111561090157610901610b5f565b604051601f8301601f19908116603f0116810190828211818310171561092957610929610b5f565b81604052838152866020858801011115610941578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561096e578081fd5b81356001600160a01b0381168114610984578182fd5b9392505050565b6000806020838503121561099d578081fd5b823567ffffffffffffffff808211156109b4578283fd5b818501915085601f8301126109c7578283fd5b8135818111156109d5578384fd5b8660208285010111156109e6578384fd5b60209290920196919550909350505050565b600060208284031215610a09578081fd5b813567ffffffffffffffff811115610a1f578182fd5b610a2b848285016108d6565b949350505050565b60008060408385031215610a45578182fd5b823567ffffffffffffffff811115610a5b578283fd5b610a67858286016108d6565b95602094909401359450505050565b60008251610a88818460208701610af4565b9190910192915050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020815260008251806020840152610ae0816040850160208701610af4565b601f01601f19169190910160400192915050565b60005b83811015610b0f578181015183820152602001610af7565b83811115610b1e576000848401525b50505050565b600181811c90821680610b3857607f821691505b60208210811415610b5957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220d236d7401c8f60813bde49a6cdc8a06041433d82405214b1f60e987981fc722364736f6c63430008040033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBAB DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xB85B2995 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB85B2995 EQ PUSH2 0x215 JUMPI DUP1 PUSH4 0xD3072D82 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0xE186E727 EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0xF62D1888 EQ PUSH2 0x25B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x9A86139B EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xA26388BB EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0xAC7A25EE EQ PUSH2 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x15B60141 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x15B60141 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x2D94A2D0 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x5F606662 EQ PUSH2 0x1BC JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCAB219A EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0xD8E6E2C EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x11F45E9C EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x142C9EB5 EQ PUSH2 0x176 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x123 PUSH2 0x11E CALLDATASIZE PUSH1 0x4 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 DUP2 MSTORE PUSH2 0x2B19 PUSH1 0xF1 SHL PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14C SWAP2 SWAP1 PUSH2 0xAC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x168 PUSH2 0x163 CALLDATASIZE PUSH1 0x4 PUSH2 0x9F8 JUMP JUMPDEST PUSH2 0x300 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x14C JUMP JUMPDEST PUSH2 0x123 PUSH2 0x328 JUMP JUMPDEST PUSH2 0x168 PUSH2 0x18C CALLDATASIZE PUSH1 0x4 PUSH2 0x9F8 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD DUP1 MLOAD PUSH1 0x67 DUP3 MSTORE SWAP3 DUP3 ADD SWAP2 SWAP1 SWAP4 ADD KECCAK256 SWAP2 MSTORE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x14C JUMP JUMPDEST PUSH2 0x123 PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0xA33 JUMP JUMPDEST PUSH2 0x37D JUMP JUMPDEST PUSH2 0x123 PUSH2 0x3A2 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x14C JUMP JUMPDEST PUSH2 0x13F PUSH2 0x3B6 JUMP JUMPDEST PUSH2 0x123 PUSH2 0x48C JUMP JUMPDEST PUSH2 0x123 PUSH2 0x210 CALLDATASIZE PUSH1 0x4 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x4D4 JUMP JUMPDEST PUSH2 0x123 PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x2B6 JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH2 0x1AC SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x123 PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST PUSH2 0x123 PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0x95D JUMP JUMPDEST PUSH2 0x50D JUMP JUMPDEST PUSH2 0x123 PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0x9F8 JUMP JUMPDEST PUSH2 0x586 JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x14D95D081D1BC81C995D995C9D PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2C2 PUSH1 0x65 DUP4 DUP4 PUSH2 0x7C9 JUMP JUMPDEST POP PUSH32 0xEA8482EB24FDCBD88250F9FD14644F201467FCAF3C5F08A0675ED9D46977AE3B DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2F4 SWAP3 SWAP2 SWAP1 PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 DUP3 PUSH1 0x40 MLOAD PUSH2 0x312 SWAP2 SWAP1 PUSH2 0xA76 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x330 PUSH2 0x6B2 JUMP JUMPDEST PUSH1 0x66 DUP1 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP3 AND DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x40 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE PUSH32 0x88E95CF2F314E458491F98F3BE8F296EE704BFC5B2CBEDDCDA73B61D44C9060B SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST DUP1 PUSH1 0x67 DUP4 PUSH1 0x40 MLOAD PUSH2 0x38E SWAP2 SWAP1 PUSH2 0xA76 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SSTORE POP POP JUMP JUMPDEST PUSH2 0x3AA PUSH2 0x6B2 JUMP JUMPDEST PUSH2 0x3B4 PUSH1 0x0 PUSH2 0x70C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x60 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x3FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x14D95D081D1BC81C995D995C9D PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2AD JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH2 0x409 SWAP1 PUSH2 0xB24 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x435 SWAP1 PUSH2 0xB24 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x482 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x457 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x482 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x465 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C20686173206265656E20726576657274656421000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2AD JUMP JUMPDEST PUSH32 0xEA8482EB24FDCBD88250F9FD14644F201467FCAF3C5F08A0675ED9D46977AE3B DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2F4 SWAP3 SWAP2 SWAP1 PUSH2 0xA92 JUMP JUMPDEST PUSH2 0x2B6 PUSH2 0x6B2 JUMP JUMPDEST PUSH2 0x515 PUSH2 0x6B2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x57A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2AD JUMP JUMPDEST PUSH2 0x583 DUP2 PUSH2 0x70C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x5A6 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x5C0 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C0 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x623 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2AD JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x64E PUSH2 0x75E JUMP JUMPDEST DUP2 MLOAD PUSH2 0x661 SWAP1 PUSH1 0x65 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x84D JUMP JUMPDEST POP PUSH1 0x66 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH2 0x2F4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2AD JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2AD JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x7D5 SWAP1 PUSH2 0xB24 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x7F7 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x83D JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x810 JUMPI DUP3 DUP1 ADD PUSH1 0xFF NOT DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 0x83D JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x83D JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x83D JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x822 JUMP JUMPDEST POP PUSH2 0x849 SWAP3 SWAP2 POP PUSH2 0x8C1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x859 SWAP1 PUSH2 0xB24 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x87B JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x83D JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x894 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x83D JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x83D JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x83D JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x8A6 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x849 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x8C2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8E6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x901 JUMPI PUSH2 0x901 PUSH2 0xB5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x929 JUMPI PUSH2 0x929 PUSH2 0xB5F JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x941 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP3 DUP4 ADD PUSH1 0x20 ADD SWAP4 SWAP1 SWAP4 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x96E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x984 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x99D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x9B4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9C7 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x9D5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x9E6 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA09 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA1F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA2B DUP5 DUP3 DUP6 ADD PUSH2 0x8D6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA45 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA5B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA67 DUP6 DUP3 DUP7 ADD PUSH2 0x8D6 JUMP JUMPDEST SWAP6 PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD CALLDATALOAD SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xA88 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xAF4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xAE0 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xAF4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB0F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAF7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xB1E JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xB38 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xB59 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD2 CALLDATASIZE 0xD7 BLOCKHASH SHR DUP16 PUSH1 0x81 EXTCODESIZE 0xDE 0x49 0xA6 0xCD 0xC8 LOG0 PUSH1 0x41 NUMBER RETURNDATASIZE DUP3 BLOCKHASH MSTORE EQ 0xB1 0xF6 0xE SWAP9 PUSH26 0x81FC722364736F6C634300080400330000000000000000000000 ",
          "sourceMap": "379:508:5:-:0;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:7392:6",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:6",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "67:686:6",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "116:24:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "125:5:6"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "132:5:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "118:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "118:20:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "118:20:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "95:6:6"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "103:4:6",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "91:3:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "91:17:6"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "110:3:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "87:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "87:27:6"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "80:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "80:35:6"
                          },
                          "nodeType": "YulIf",
                          "src": "77:2:6"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "149:30:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "172:6:6"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "159:12:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "159:20:6"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "153:2:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "188:28:6",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "198:18:6",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "192:2:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "239:22:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "241:16:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "241:18:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "241:18:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "231:2:6"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "235:2:6"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "228:2:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "228:10:6"
                          },
                          "nodeType": "YulIf",
                          "src": "225:2:6"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "270:17:6",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "284:2:6",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "280:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "280:7:6"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "274:2:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "296:23:6",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "316:2:6",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "310:5:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "310:9:6"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "300:6:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "328:71:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "350:6:6"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "374:2:6"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "378:4:6",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "370:3:6"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "370:13:6"
                                          },
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "385:2:6"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "366:3:6"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "366:22:6"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "390:2:6",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "362:3:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "362:31:6"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "395:2:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "358:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "358:40:6"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "346:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "346:53:6"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "332:10:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "458:22:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "460:16:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "460:18:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "460:18:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "417:10:6"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "429:2:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "414:2:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "414:18:6"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "437:10:6"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "449:6:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "434:2:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "434:22:6"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "411:2:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "411:46:6"
                          },
                          "nodeType": "YulIf",
                          "src": "408:2:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "496:2:6",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "500:10:6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "489:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "489:22:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "489:22:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "527:6:6"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "535:2:6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "520:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "520:18:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "520:18:6"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "586:24:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "595:5:6"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "602:5:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "588:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "588:20:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "588:20:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "561:6:6"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "569:2:6"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "557:3:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "557:15:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "574:4:6",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "553:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "553:26:6"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "581:3:6"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "550:2:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "550:35:6"
                          },
                          "nodeType": "YulIf",
                          "src": "547:2:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "636:6:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "644:4:6",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "632:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "632:17:6"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "655:6:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "663:4:6",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "651:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "651:17:6"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "670:2:6"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "619:12:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "619:54:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "619:54:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "697:6:6"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "705:2:6"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "693:3:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "693:15:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "710:4:6",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "689:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "689:26:6"
                              },
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "717:5:6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "682:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "682:41:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "682:41:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "732:15:6",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "741:6:6"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "732:5:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "41:6:6",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "49:3:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "57:5:6",
                        "type": ""
                      }
                    ],
                    "src": "14:739:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "828:236:6",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "874:26:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "883:6:6"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "891:6:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "876:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "876:22:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "876:22:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "849:7:6"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "858:9:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "845:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "845:23:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "870:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "841:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "841:32:6"
                          },
                          "nodeType": "YulIf",
                          "src": "838:2:6"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "909:36:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "935:9:6"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "922:12:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "922:23:6"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "913:5:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1008:26:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1017:6:6"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1025:6:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1010:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1010:22:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1010:22:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "967:5:6"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "978:5:6"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "993:3:6",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "998:1:6",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "989:3:6"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "989:11:6"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1002:1:6",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "985:3:6"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "985:19:6"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "974:3:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "974:31:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "964:2:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "964:42:6"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "957:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "957:50:6"
                          },
                          "nodeType": "YulIf",
                          "src": "954:2:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1043:15:6",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1053:5:6"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1043:6:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "794:9:6",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "805:7:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "817:6:6",
                        "type": ""
                      }
                    ],
                    "src": "758:306:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1159:552:6",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1205:26:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1214:6:6"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1222:6:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1207:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1207:22:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1207:22:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1180:7:6"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1189:9:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1176:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1176:23:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1201:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1172:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1172:32:6"
                          },
                          "nodeType": "YulIf",
                          "src": "1169:2:6"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1240:37:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1267:9:6"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1254:12:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1254:23:6"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "1244:6:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1286:28:6",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1296:18:6",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1290:2:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1341:26:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1350:6:6"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1358:6:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1343:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1343:22:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1343:22:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1329:6:6"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1337:2:6"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1326:2:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1326:14:6"
                          },
                          "nodeType": "YulIf",
                          "src": "1323:2:6"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1376:32:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1390:9:6"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1401:6:6"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1386:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1386:22:6"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1380:2:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1456:26:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1465:6:6"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1473:6:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1458:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1458:22:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1458:22:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1435:2:6"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1439:4:6",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1431:3:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1431:13:6"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1446:7:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1427:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1427:27:6"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1420:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1420:35:6"
                          },
                          "nodeType": "YulIf",
                          "src": "1417:2:6"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1491:30:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1518:2:6"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1505:12:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1505:16:6"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "1495:6:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1548:26:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1557:6:6"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1565:6:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1550:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1550:22:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1550:22:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1536:6:6"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1544:2:6"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1533:2:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1533:14:6"
                          },
                          "nodeType": "YulIf",
                          "src": "1530:2:6"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1624:26:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1633:6:6"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1641:6:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1626:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1626:22:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1626:22:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1597:2:6"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "1601:6:6"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1593:3:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1593:15:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1610:2:6",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1589:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1589:24:6"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1615:7:6"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1586:2:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1586:37:6"
                          },
                          "nodeType": "YulIf",
                          "src": "1583:2:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1659:21:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1673:2:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1677:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1669:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1669:11:6"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1659:6:6"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1689:16:6",
                          "value": {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1699:6:6"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1689:6:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1117:9:6",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1128:7:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1140:6:6",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1148:6:6",
                        "type": ""
                      }
                    ],
                    "src": "1069:642:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1796:262:6",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1842:26:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1851:6:6"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1859:6:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1844:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1844:22:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1844:22:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1817:7:6"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1826:9:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1813:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1813:23:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1838:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1809:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1809:32:6"
                          },
                          "nodeType": "YulIf",
                          "src": "1806:2:6"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1877:37:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1904:9:6"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1891:12:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1891:23:6"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "1881:6:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1957:26:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1966:6:6"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1974:6:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1959:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1959:22:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1959:22:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1929:6:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1937:18:6",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1926:2:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1926:30:6"
                          },
                          "nodeType": "YulIf",
                          "src": "1923:2:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1992:60:6",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2024:9:6"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2035:6:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2020:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2020:22:6"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2044:7:6"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "2002:17:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2002:50:6"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1992:6:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1762:9:6",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1773:7:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1785:6:6",
                        "type": ""
                      }
                    ],
                    "src": "1716:342:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2160:313:6",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2206:26:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2215:6:6"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2223:6:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2208:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2208:22:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2208:22:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2181:7:6"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2190:9:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2177:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2177:23:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2202:2:6",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2173:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2173:32:6"
                          },
                          "nodeType": "YulIf",
                          "src": "2170:2:6"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2241:37:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2268:9:6"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2255:12:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2255:23:6"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "2245:6:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2321:26:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2330:6:6"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2338:6:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2323:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2323:22:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2323:22:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2293:6:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2301:18:6",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2290:2:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2290:30:6"
                          },
                          "nodeType": "YulIf",
                          "src": "2287:2:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2356:60:6",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2388:9:6"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2399:6:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2384:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2384:22:6"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2408:7:6"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "2366:17:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2366:50:6"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2356:6:6"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2425:42:6",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2452:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2463:2:6",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2448:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2448:18:6"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2435:12:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2435:32:6"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2425:6:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptrt_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2118:9:6",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2129:7:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2141:6:6",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2149:6:6",
                        "type": ""
                      }
                    ],
                    "src": "2063:410:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2617:137:6",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2627:27:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2647:6:6"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2641:5:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2641:13:6"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "2631:6:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2689:6:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2697:4:6",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2685:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2685:17:6"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2704:3:6"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2709:6:6"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2663:21:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2663:53:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2663:53:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2725:23:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2736:3:6"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2741:6:6"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2732:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2732:16:6"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "2725:3:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2593:3:6",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2598:6:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2609:3:6",
                        "type": ""
                      }
                    ],
                    "src": "2478:276:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2860:102:6",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2870:26:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2882:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2893:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2878:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2878:18:6"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2870:4:6"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2912:9:6"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2927:6:6"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2943:3:6",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2948:1:6",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "2939:3:6"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2939:11:6"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2952:1:6",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2935:3:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2935:19:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2923:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2923:32:6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2905:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2905:51:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2905:51:6"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2829:9:6",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2840:6:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2851:4:6",
                        "type": ""
                      }
                    ],
                    "src": "2759:203:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3062:92:6",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3072:26:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3084:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3095:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3080:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3080:18:6"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3072:4:6"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3114:9:6"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "3139:6:6"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "3132:6:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3132:14:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "3125:6:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3125:22:6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3107:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3107:41:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3107:41:6"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3031:9:6",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3042:6:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3053:4:6",
                        "type": ""
                      }
                    ],
                    "src": "2967:187:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3266:87:6",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3276:26:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3288:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3299:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3284:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3284:18:6"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3276:4:6"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3318:9:6"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3333:6:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3341:4:6",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3329:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3329:17:6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3311:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3311:36:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3311:36:6"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3235:9:6",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3246:6:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3257:4:6",
                        "type": ""
                      }
                    ],
                    "src": "3159:194:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3489:262:6",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3506:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3517:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3499:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3499:21:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3499:21:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3540:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3551:2:6",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3536:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3536:18:6"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "3556:6:6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3529:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3529:34:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3529:34:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3589:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3600:2:6",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3585:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3585:18:6"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3605:6:6"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "3613:6:6"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "3572:12:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3572:48:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3572:48:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3644:9:6"
                                      },
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3655:6:6"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3640:3:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3640:22:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3664:2:6",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3636:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3636:31:6"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "3669:4:6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3629:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3629:45:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3629:45:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3683:62:6",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3699:9:6"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value1",
                                            "nodeType": "YulIdentifier",
                                            "src": "3718:6:6"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3726:2:6",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "3714:3:6"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3714:15:6"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3735:2:6",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "3731:3:6"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3731:7:6"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3710:3:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3710:29:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3695:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3695:45:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3742:2:6",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3691:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3691:54:6"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3683:4:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3450:9:6",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3461:6:6",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3469:6:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3480:4:6",
                        "type": ""
                      }
                    ],
                    "src": "3358:393:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3877:262:6",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3894:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3905:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3887:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3887:21:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3887:21:6"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3917:27:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3937:6:6"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3931:5:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3931:13:6"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3921:6:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3964:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3975:2:6",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3960:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3960:18:6"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3980:6:6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3953:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3953:34:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3953:34:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "4022:6:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4030:2:6",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4018:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4018:15:6"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4039:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4050:2:6",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4035:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4035:18:6"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4055:6:6"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "3996:21:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3996:66:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3996:66:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4071:62:6",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4087:9:6"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "4106:6:6"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4114:2:6",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "4102:3:6"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4102:15:6"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4123:2:6",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "4119:3:6"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4119:7:6"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "4098:3:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4098:29:6"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4083:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4083:45:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4130:2:6",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4079:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4079:54:6"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4071:4:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3846:9:6",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3857:6:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3868:4:6",
                        "type": ""
                      }
                    ],
                    "src": "3756:383:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4318:173:6",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4335:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4346:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4328:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4328:21:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4328:21:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4369:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4380:2:6",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4365:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4365:18:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4385:2:6",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4358:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4358:30:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4358:30:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4408:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4419:2:6",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4404:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4404:18:6"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4424:25:6",
                                "type": "",
                                "value": "Call has been reverted!"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4397:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4397:53:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4397:53:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4459:26:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4471:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4482:2:6",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4467:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4467:18:6"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4459:4:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_089c88d100df7a0363aff63cccda965ba4ec7974a56e0efe8deb6e17b9961693__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4295:9:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4309:4:6",
                        "type": ""
                      }
                    ],
                    "src": "4144:347:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4670:228:6",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4687:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4698:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4680:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4680:21:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4680:21:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4721:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4732:2:6",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4717:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4717:18:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4737:2:6",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4710:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4710:30:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4710:30:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4760:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4771:2:6",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4756:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4756:18:6"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4776:34:6",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4749:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4749:62:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4749:62:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4831:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4842:2:6",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4827:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4827:18:6"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4847:8:6",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4820:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4820:36:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4820:36:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4865:27:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4877:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4888:3:6",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4873:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4873:19:6"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4865:4:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4647:9:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4661:4:6",
                        "type": ""
                      }
                    ],
                    "src": "4496:402:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5077:236:6",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5094:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5105:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5087:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5087:21:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5087:21:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5128:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5139:2:6",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5124:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5124:18:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5144:2:6",
                                "type": "",
                                "value": "46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5117:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5117:30:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5117:30:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5167:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5178:2:6",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5163:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5163:18:6"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5183:34:6",
                                "type": "",
                                "value": "Initializable: contract is alrea"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5156:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5156:62:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5156:62:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5238:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5249:2:6",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5234:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5234:18:6"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5254:16:6",
                                "type": "",
                                "value": "dy initialized"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5227:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5227:44:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5227:44:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5280:27:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5292:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5303:3:6",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5288:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5288:19:6"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5280:4:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5054:9:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5068:4:6",
                        "type": ""
                      }
                    ],
                    "src": "4903:410:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5492:182:6",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5509:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5520:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5502:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5502:21:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5502:21:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5543:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5554:2:6",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5539:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5539:18:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5559:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5532:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5532:30:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5532:30:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5582:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5593:2:6",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5578:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5578:18:6"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5598:34:6",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5571:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5571:62:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5571:62:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5642:26:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5654:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5665:2:6",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5650:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5650:18:6"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5642:4:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5469:9:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5483:4:6",
                        "type": ""
                      }
                    ],
                    "src": "5318:356:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5853:233:6",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5870:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5881:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5863:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5863:21:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5863:21:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5904:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5915:2:6",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5900:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5900:18:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5920:2:6",
                                "type": "",
                                "value": "43"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5893:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5893:30:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5893:30:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5943:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5954:2:6",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5939:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5939:18:6"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5959:34:6",
                                "type": "",
                                "value": "Initializable: contract is not i"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5932:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5932:62:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5932:62:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6014:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6025:2:6",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6010:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6010:18:6"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6030:13:6",
                                "type": "",
                                "value": "nitializing"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6003:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6003:41:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6003:41:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6053:27:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6065:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6076:3:6",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6061:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6061:19:6"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6053:4:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5830:9:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5844:4:6",
                        "type": ""
                      }
                    ],
                    "src": "5679:407:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6265:163:6",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6282:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6293:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6275:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6275:21:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6275:21:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6316:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6327:2:6",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6312:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6312:18:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6332:2:6",
                                "type": "",
                                "value": "13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6305:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6305:30:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6305:30:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6355:9:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6366:2:6",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6351:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6351:18:6"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6371:15:6",
                                "type": "",
                                "value": "Set to revert"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6344:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6344:43:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6344:43:6"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6396:26:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6408:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6419:2:6",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6404:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6404:18:6"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6396:4:6"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ea79a128addd763bb92c6b36c9c28fc88d8a733fba0da6856811117ee5b2767a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6242:9:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6256:4:6",
                        "type": ""
                      }
                    ],
                    "src": "6091:337:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6534:76:6",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6544:26:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6556:9:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6567:2:6",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6552:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6552:18:6"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6544:4:6"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6586:9:6"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6597:6:6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6579:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6579:25:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6579:25:6"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6503:9:6",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6514:6:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6525:4:6",
                        "type": ""
                      }
                    ],
                    "src": "6433:177:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6668:205:6",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6678:10:6",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6687:1:6",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "6682:1:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6747:63:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "6772:3:6"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "6777:1:6"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "6768:3:6"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6768:11:6"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "6791:3:6"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "6796:1:6"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "6787:3:6"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "6787:11:6"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "6781:5:6"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6781:18:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "6761:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6761:39:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6761:39:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "6708:1:6"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6711:6:6"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "6705:2:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6705:13:6"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "6719:19:6",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "6721:15:6",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "6730:1:6"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6733:2:6",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6726:3:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6726:10:6"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "6721:1:6"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "6701:3:6",
                            "statements": []
                          },
                          "src": "6697:113:6"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6836:31:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "6849:3:6"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "6854:6:6"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "6845:3:6"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6845:16:6"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6863:1:6",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "6838:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6838:27:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6838:27:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "6825:1:6"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6828:6:6"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6822:2:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6822:13:6"
                          },
                          "nodeType": "YulIf",
                          "src": "6819:2:6"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "6646:3:6",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "6651:3:6",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "6656:6:6",
                        "type": ""
                      }
                    ],
                    "src": "6615:258:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6933:325:6",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6943:22:6",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6957:1:6",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "6960:4:6"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "6953:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6953:12:6"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "6943:6:6"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6974:38:6",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "7004:4:6"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7010:1:6",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "7000:3:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7000:12:6"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "6978:18:6",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7051:31:6",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "7053:27:6",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "7067:6:6"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7075:4:6",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "7063:3:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7063:17:6"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "7053:6:6"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "7031:18:6"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "7024:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7024:26:6"
                          },
                          "nodeType": "YulIf",
                          "src": "7021:2:6"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7141:111:6",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7162:1:6",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7169:3:6",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7174:10:6",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "7165:3:6"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7165:20:6"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "7155:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7155:31:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7155:31:6"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7206:1:6",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7209:4:6",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "7199:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7199:15:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7199:15:6"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7234:1:6",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7237:4:6",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7227:6:6"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7227:15:6"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7227:15:6"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "7097:18:6"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "7120:6:6"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7128:2:6",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "7117:2:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7117:14:6"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "7094:2:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7094:38:6"
                          },
                          "nodeType": "YulIf",
                          "src": "7091:2:6"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "6913:4:6",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "6922:6:6",
                        "type": ""
                      }
                    ],
                    "src": "6878:380:6"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7295:95:6",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7312:1:6",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7319:3:6",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7324:10:6",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "7315:3:6"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7315:20:6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7305:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7305:31:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7305:31:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7352:1:6",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7355:4:6",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7345:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7345:15:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7345:15:6"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7376:1:6",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7379:4:6",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "7369:6:6"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7369:15:6"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7369:15:6"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "7263:127:6"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), array)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_string_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value1, value1) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value1, value1) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value1, value1) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value1, value1) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(value1, value1) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), tail)\n        tail := add(add(headStart, and(add(value1, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_089c88d100df7a0363aff63cccda965ba4ec7974a56e0efe8deb6e17b9961693__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Call has been reverted!\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ea79a128addd763bb92c6b36c9c28fc88d8a733fba0da6856811117ee5b2767a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Set to revert\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
              "id": 6,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063b85b299511610071578063b85b299514610215578063d3072d8214610228578063e186e72714610235578063f2fde38b14610248578063f62d18881461025b57600080fd5b80638da5cb5b146101d75780639a86139b146101f2578063a26388bb146101fa578063ac7a25ee1461020257600080fd5b806315b60141116100de57806315b601411461017e5780632d94a2d0146101a95780635f606662146101bc578063715018a6146101cf57600080fd5b80630cab219a146101105780630d8e6e2c1461012557806311f45e9c14610155578063142c9eb514610176575b600080fd5b61012361011e36600461098b565b61026e565b005b6040805180820190915260028152612b1960f11b60208201525b60405161014c9190610ac1565b60405180910390f35b6101686101633660046109f8565b610300565b60405190815260200161014c565b610123610328565b61016861018c3660046109f8565b805160208183018101805160678252928201919093012091525481565b60015b604051901515815260200161014c565b6101236101ca366004610a33565b61037d565b6101236103a2565b6033546040516001600160a01b03909116815260200161014c565b61013f6103b6565b61012361048c565b61012361021036600461098b565b6104d4565b61012361022336600461098b565b6102b6565b6066546101ac9060ff1681565b61012361024336600461098b565b610505565b61012361025636600461095d565b61050d565b6101236102693660046109f8565b610586565b60665460ff16156102b65760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064015b60405180910390fd5b6102c2606583836107c9565b507fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b60405180910390a15050565b60006067826040516103129190610a76565b9081526020016040518091039020549050919050565b6103306106b2565b6066805460ff8082161560ff1990921682179092556040519116151581527f88e95cf2f314e458491f98f3be8f296ee704bfc5b2cbeddcda73b61d44c9060b9060200160405180910390a1565b8060678360405161038e9190610a76565b908152604051908190036020019020555050565b6103aa6106b2565b6103b4600061070c565b565b60665460609060ff16156103fc5760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064016102ad565b6065805461040990610b24565b80601f016020809104026020016040519081016040528092919081815260200182805461043590610b24565b80156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b5050505050905090565b60405162461bcd60e51b815260206004820152601760248201527f43616c6c20686173206265656e2072657665727465642100000000000000000060448201526064016102ad565b7fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b6102b66106b2565b6105156106b2565b6001600160a01b03811661057a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ad565b6105838161070c565b50565b600054610100900460ff16158080156105a65750600054600160ff909116105b806105c05750303b1580156105c0575060005460ff166001145b6106235760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102ad565b6000805460ff191660011790558015610646576000805461ff0019166101001790555b61064e61075e565b815161066190606590602085019061084d565b506066805460ff1916905580156106ae576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016102f4565b5050565b6033546001600160a01b031633146103b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ad565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166103b45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016102ad565b8280546107d590610b24565b90600052602060002090601f0160209004810192826107f7576000855561083d565b82601f106108105782800160ff1982351617855561083d565b8280016001018555821561083d579182015b8281111561083d578235825591602001919060010190610822565b506108499291506108c1565b5090565b82805461085990610b24565b90600052602060002090601f01602090048101928261087b576000855561083d565b82601f1061089457805160ff191683800117855561083d565b8280016001018555821561083d579182015b8281111561083d5782518255916020019190600101906108a6565b5b8082111561084957600081556001016108c2565b600082601f8301126108e6578081fd5b813567ffffffffffffffff8082111561090157610901610b5f565b604051601f8301601f19908116603f0116810190828211818310171561092957610929610b5f565b81604052838152866020858801011115610941578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561096e578081fd5b81356001600160a01b0381168114610984578182fd5b9392505050565b6000806020838503121561099d578081fd5b823567ffffffffffffffff808211156109b4578283fd5b818501915085601f8301126109c7578283fd5b8135818111156109d5578384fd5b8660208285010111156109e6578384fd5b60209290920196919550909350505050565b600060208284031215610a09578081fd5b813567ffffffffffffffff811115610a1f578182fd5b610a2b848285016108d6565b949350505050565b60008060408385031215610a45578182fd5b823567ffffffffffffffff811115610a5b578283fd5b610a67858286016108d6565b95602094909401359450505050565b60008251610a88818460208701610af4565b9190910192915050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020815260008251806020840152610ae0816040850160208701610af4565b601f01601f19169190910160400192915050565b60005b83811015610b0f578181015183820152602001610af7565b83811115610b1e576000848401525b50505050565b600181811c90821680610b3857607f821691505b60208210811415610b5957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220d236d7401c8f60813bde49a6cdc8a06041433d82405214b1f60e987981fc722364736f6c63430008040033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xB85B2995 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB85B2995 EQ PUSH2 0x215 JUMPI DUP1 PUSH4 0xD3072D82 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0xE186E727 EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0xF62D1888 EQ PUSH2 0x25B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x9A86139B EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xA26388BB EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0xAC7A25EE EQ PUSH2 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x15B60141 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x15B60141 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x2D94A2D0 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x5F606662 EQ PUSH2 0x1BC JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCAB219A EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0xD8E6E2C EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x11F45E9C EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x142C9EB5 EQ PUSH2 0x176 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x123 PUSH2 0x11E CALLDATASIZE PUSH1 0x4 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 DUP2 MSTORE PUSH2 0x2B19 PUSH1 0xF1 SHL PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14C SWAP2 SWAP1 PUSH2 0xAC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x168 PUSH2 0x163 CALLDATASIZE PUSH1 0x4 PUSH2 0x9F8 JUMP JUMPDEST PUSH2 0x300 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x14C JUMP JUMPDEST PUSH2 0x123 PUSH2 0x328 JUMP JUMPDEST PUSH2 0x168 PUSH2 0x18C CALLDATASIZE PUSH1 0x4 PUSH2 0x9F8 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD DUP1 MLOAD PUSH1 0x67 DUP3 MSTORE SWAP3 DUP3 ADD SWAP2 SWAP1 SWAP4 ADD KECCAK256 SWAP2 MSTORE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x14C JUMP JUMPDEST PUSH2 0x123 PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0xA33 JUMP JUMPDEST PUSH2 0x37D JUMP JUMPDEST PUSH2 0x123 PUSH2 0x3A2 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x14C JUMP JUMPDEST PUSH2 0x13F PUSH2 0x3B6 JUMP JUMPDEST PUSH2 0x123 PUSH2 0x48C JUMP JUMPDEST PUSH2 0x123 PUSH2 0x210 CALLDATASIZE PUSH1 0x4 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x4D4 JUMP JUMPDEST PUSH2 0x123 PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x2B6 JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH2 0x1AC SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x123 PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0x98B JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST PUSH2 0x123 PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0x95D JUMP JUMPDEST PUSH2 0x50D JUMP JUMPDEST PUSH2 0x123 PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0x9F8 JUMP JUMPDEST PUSH2 0x586 JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x14D95D081D1BC81C995D995C9D PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2C2 PUSH1 0x65 DUP4 DUP4 PUSH2 0x7C9 JUMP JUMPDEST POP PUSH32 0xEA8482EB24FDCBD88250F9FD14644F201467FCAF3C5F08A0675ED9D46977AE3B DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2F4 SWAP3 SWAP2 SWAP1 PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 DUP3 PUSH1 0x40 MLOAD PUSH2 0x312 SWAP2 SWAP1 PUSH2 0xA76 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x330 PUSH2 0x6B2 JUMP JUMPDEST PUSH1 0x66 DUP1 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO PUSH1 0xFF NOT SWAP1 SWAP3 AND DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x40 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE PUSH32 0x88E95CF2F314E458491F98F3BE8F296EE704BFC5B2CBEDDCDA73B61D44C9060B SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST DUP1 PUSH1 0x67 DUP4 PUSH1 0x40 MLOAD PUSH2 0x38E SWAP2 SWAP1 PUSH2 0xA76 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SSTORE POP POP JUMP JUMPDEST PUSH2 0x3AA PUSH2 0x6B2 JUMP JUMPDEST PUSH2 0x3B4 PUSH1 0x0 PUSH2 0x70C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x60 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x3FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x14D95D081D1BC81C995D995C9D PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2AD JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH2 0x409 SWAP1 PUSH2 0xB24 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x435 SWAP1 PUSH2 0xB24 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x482 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x457 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x482 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x465 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C20686173206265656E20726576657274656421000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2AD JUMP JUMPDEST PUSH32 0xEA8482EB24FDCBD88250F9FD14644F201467FCAF3C5F08A0675ED9D46977AE3B DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2F4 SWAP3 SWAP2 SWAP1 PUSH2 0xA92 JUMP JUMPDEST PUSH2 0x2B6 PUSH2 0x6B2 JUMP JUMPDEST PUSH2 0x515 PUSH2 0x6B2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x57A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2AD JUMP JUMPDEST PUSH2 0x583 DUP2 PUSH2 0x70C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x5A6 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x5C0 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C0 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x623 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2AD JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x64E PUSH2 0x75E JUMP JUMPDEST DUP2 MLOAD PUSH2 0x661 SWAP1 PUSH1 0x65 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x84D JUMP JUMPDEST POP PUSH1 0x66 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH2 0x2F4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2AD JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2AD JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x7D5 SWAP1 PUSH2 0xB24 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x7F7 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x83D JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x810 JUMPI DUP3 DUP1 ADD PUSH1 0xFF NOT DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 0x83D JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x83D JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x83D JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x822 JUMP JUMPDEST POP PUSH2 0x849 SWAP3 SWAP2 POP PUSH2 0x8C1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x859 SWAP1 PUSH2 0xB24 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x87B JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x83D JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x894 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x83D JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x83D JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x83D JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x8A6 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x849 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x8C2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8E6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x901 JUMPI PUSH2 0x901 PUSH2 0xB5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x929 JUMPI PUSH2 0x929 PUSH2 0xB5F JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x941 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP3 DUP4 ADD PUSH1 0x20 ADD SWAP4 SWAP1 SWAP4 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x96E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x984 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x99D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x9B4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9C7 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x9D5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x9E6 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA09 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA1F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA2B DUP5 DUP3 DUP6 ADD PUSH2 0x8D6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA45 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA5B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA67 DUP6 DUP3 DUP7 ADD PUSH2 0x8D6 JUMP JUMPDEST SWAP6 PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD CALLDATALOAD SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xA88 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xAF4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xAE0 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xAF4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB0F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAF7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xB1E JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xB38 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xB59 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD2 CALLDATASIZE 0xD7 BLOCKHASH SHR DUP16 PUSH1 0x81 EXTCODESIZE 0xDE 0x49 0xA6 0xCD 0xC8 LOG0 PUSH1 0x41 NUMBER RETURNDATASIZE DUP3 BLOCKHASH MSTORE EQ 0xB1 0xF6 0xE SWAP9 PUSH26 0x81FC722364736F6C634300080400330000000000000000000000 ",
          "sourceMap": "379:508:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1730:170:4;;;;;;:::i;:::-;;:::i;:::-;;796:89:5;869:11;;;;;;;;;;;;-1:-1:-1;;;869:11:5;;;;796:89;;;;;;;:::i;:::-;;;;;;;;1017:110:4;;;;;;:::i;:::-;;:::i;:::-;;;6579:25:6;;;6567:2;6552:18;1017:110:4;6534:76:6;1221:130:4;;;:::i;617:43::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;585:65:5;641:4;585:65;;;3132:14:6;;3125:22;3107:41;;3095:2;3080:18;585:65:5;3062:92:6;901:112:4;;;;;;:::i;:::-;;:::i;2071:101:0:-;;;:::i;1441:85::-;1513:6;;1441:85;;-1:-1:-1;;;;;1513:6:0;;;2905:51:6;;2893:2;2878:18;1441:85:0;2860:102:6;2789:124:4;;;:::i;1131:86::-;;;:::i;2553:98::-;;;;;;:::i;:::-;;:::i;1355:122::-;;;;;;:::i;:::-;;:::i;589:24::-;;;;;;;;;2152:129;;;;;;:::i;:::-;;:::i;2321:198:0:-;;;;;;:::i;:::-;;:::i;750:147:4:-;;;;;;:::i;:::-;;:::i;1730:170::-;1810:12;;;;1809:13;1801:39;;;;-1:-1:-1;;;1801:39:4;;6293:2:6;1801:39:4;;;6275:21:6;6332:2;6312:18;;;6305:30;-1:-1:-1;;;6351:18:6;;;6344:43;6404:18;;1801:39:4;;;;;;;;;1846:16;:5;1854:8;;1846:16;:::i;:::-;;1873:22;1886:8;;1873:22;;;;;;;:::i;:::-;;;;;;;;1730:170;;:::o;1017:110::-;1082:4;1101:11;1113:8;1101:21;;;;;;:::i;:::-;;;;;;;;;;;;;;1094:28;;1017:110;;;:::o;1221:130::-;1334:13:0;:11;:13::i;:::-;1290:12:4::1;::::0;;::::1;::::0;;::::1;1289:13;-1:-1:-1::0;;1274:28:4;;::::1;::::0;::::1;::::0;;;1313:33:::1;::::0;1333:12;;3132:14:6;3125:22;3107:41;;1313:33:4::1;::::0;3095:2:6;3080:18;1313:33:4::1;;;;;;;1221:130::o:0;901:112::-;1000:8;976:11;988:8;976:21;;;;;;:::i;:::-;;;;;;;;;;;;;;:32;-1:-1:-1;;901:112:4:o;2071:101:0:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;2789:124:4:-;2860:12;;2830:13;;2860:12;;2859:13;2851:39;;;;-1:-1:-1;;;2851:39:4;;6293:2:6;2851:39:4;;;6275:21:6;6332:2;6312:18;;;6305:30;-1:-1:-1;;;6351:18:6;;;6344:43;6404:18;;2851:39:4;6265:163:6;2851:39:4;2903:5;2896:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2789:124;:::o;1131:86::-;1171:41;;-1:-1:-1;;;1171:41:4;;4346:2:6;1171:41:4;;;4328:21:6;4385:2;4365:18;;;4358:30;4424:25;4404:18;;;4397:53;4467:18;;1171:41:4;4318:173:6;2553:98:4;2624:22;2637:8;;2624:22;;;;;;;:::i;2152:129::-;1334:13:0;:11;:13::i;2321:198::-;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2409:22:0;::::1;2401:73;;;::::0;-1:-1:-1;;;2401:73:0;;4698:2:6;2401:73:0::1;::::0;::::1;4680:21:6::0;4737:2;4717:18;;;4710:30;4776:34;4756:18;;;4749:62;-1:-1:-1;;;4827:18:6;;;4820:36;4873:19;;2401:73:0::1;4670:228:6::0;2401:73:0::1;2484:28;2503:8;2484:18;:28::i;:::-;2321:198:::0;:::o;750:147:4:-;3111:19:1;3134:13;;;;;;3133:14;;3179:34;;;;-1:-1:-1;3197:12:1;;3212:1;3197:12;;;;:16;3179:34;3178:108;;;-1:-1:-1;3258:4:1;1476:19:2;:23;;;3219:66:1;;-1:-1:-1;3268:12:1;;;;;:17;3219:66;3157:201;;;;-1:-1:-1;;;3157:201:1;;5105:2:6;3157:201:1;;;5087:21:6;5144:2;5124:18;;;5117:30;5183:34;5163:18;;;5156:62;-1:-1:-1;;;5234:18:6;;;5227:44;5288:19;;3157:201:1;5077:236:6;3157:201:1;3368:12;:16;;-1:-1:-1;;3368:16:1;3383:1;3368:16;;;3394:65;;;;3428:13;:20;;-1:-1:-1;;3428:20:1;;;;;3394:65;823:16:4::1;:14;:16::i;:::-;846:20:::0;;::::1;::::0;:5:::1;::::0;:20:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;872:12:4::1;:20:::0;;-1:-1:-1;;872:20:4::1;::::0;;3479:99:1;;;;3529:5;3513:21;;-1:-1:-1;;3513:21:1;;;3553:14;;-1:-1:-1;3311:36:6;;3553:14:1;;3299:2:6;3284:18;3553:14:1;3266:87:6;3479:99:1;750:147:4;;:::o;1599:130:0:-;1513:6;;-1:-1:-1;;;;;1513:6:0;929:10:3;1662:23:0;1654:68;;;;-1:-1:-1;;;1654:68:0;;5520:2:6;1654:68:0;;;5502:21:6;;;5539:18;;;5532:30;5598:34;5578:18;;;5571:62;5650:18;;1654:68:0;5492:182:6;2673:187:0;2765:6;;;-1:-1:-1;;;;;2781:17:0;;;-1:-1:-1;;;;;;2781:17:0;;;;;;;2813:40;;2765:6;;;2781:17;2765:6;;2813:40;;2746:16;;2813:40;2673:187;;:::o;711:59:3:-;4910:13:1;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:1;;5881:2:6;4902:69:1;;;5863:21:6;5920:2;5900:18;;;5893:30;5959:34;5939:18;;;5932:62;-1:-1:-1;;;6010:18:6;;;6003:41;6061:19;;4902:69:1;5853:233:6;-1:-1:-1;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:739:6;57:5;110:3;103:4;95:6;91:17;87:27;77:2;;132:5;125;118:20;77:2;172:6;159:20;198:18;235:2;231;228:10;225:2;;;241:18;;:::i;:::-;316:2;310:9;284:2;370:13;;-1:-1:-1;;366:22:6;;;390:2;362:31;358:40;346:53;;;414:18;;;434:22;;;411:46;408:2;;;460:18;;:::i;:::-;500:10;496:2;489:22;535:2;527:6;520:18;581:3;574:4;569:2;561:6;557:15;553:26;550:35;547:2;;;602:5;595;588:20;547:2;670;663:4;655:6;651:17;644:4;636:6;632:17;619:54;693:15;;;710:4;689:26;682:41;;;;-1:-1:-1;697:6:6;67:686;-1:-1:-1;;;67:686:6:o;758:306::-;817:6;870:2;858:9;849:7;845:23;841:32;838:2;;;891:6;883;876:22;838:2;922:23;;-1:-1:-1;;;;;974:31:6;;964:42;;954:2;;1025:6;1017;1010:22;954:2;1053:5;828:236;-1:-1:-1;;;828:236:6:o;1069:642::-;1140:6;1148;1201:2;1189:9;1180:7;1176:23;1172:32;1169:2;;;1222:6;1214;1207:22;1169:2;1267:9;1254:23;1296:18;1337:2;1329:6;1326:14;1323:2;;;1358:6;1350;1343:22;1323:2;1401:6;1390:9;1386:22;1376:32;;1446:7;1439:4;1435:2;1431:13;1427:27;1417:2;;1473:6;1465;1458:22;1417:2;1518;1505:16;1544:2;1536:6;1533:14;1530:2;;;1565:6;1557;1550:22;1530:2;1615:7;1610:2;1601:6;1597:2;1593:15;1589:24;1586:37;1583:2;;;1641:6;1633;1626:22;1583:2;1677;1669:11;;;;;1699:6;;-1:-1:-1;1159:552:6;;-1:-1:-1;;;;1159:552:6:o;1716:342::-;1785:6;1838:2;1826:9;1817:7;1813:23;1809:32;1806:2;;;1859:6;1851;1844:22;1806:2;1904:9;1891:23;1937:18;1929:6;1926:30;1923:2;;;1974:6;1966;1959:22;1923:2;2002:50;2044:7;2035:6;2024:9;2020:22;2002:50;:::i;:::-;1992:60;1796:262;-1:-1:-1;;;;1796:262:6:o;2063:410::-;2141:6;2149;2202:2;2190:9;2181:7;2177:23;2173:32;2170:2;;;2223:6;2215;2208:22;2170:2;2268:9;2255:23;2301:18;2293:6;2290:30;2287:2;;;2338:6;2330;2323:22;2287:2;2366:50;2408:7;2399:6;2388:9;2384:22;2366:50;:::i;:::-;2356:60;2463:2;2448:18;;;;2435:32;;-1:-1:-1;;;;2160:313:6:o;2478:276::-;2609:3;2647:6;2641:13;2663:53;2709:6;2704:3;2697:4;2689:6;2685:17;2663:53;:::i;:::-;2732:16;;;;;2617:137;-1:-1:-1;;2617:137:6:o;3358:393::-;3517:2;3506:9;3499:21;3556:6;3551:2;3540:9;3536:18;3529:34;3613:6;3605;3600:2;3589:9;3585:18;3572:48;3480:4;3640:22;;;3664:2;3636:31;;;3629:45;;;;3735:2;3714:15;;;-1:-1:-1;;3710:29:6;3695:45;3691:54;;3489:262;-1:-1:-1;3489:262:6:o;3756:383::-;3905:2;3894:9;3887:21;3868:4;3937:6;3931:13;3980:6;3975:2;3964:9;3960:18;3953:34;3996:66;4055:6;4050:2;4039:9;4035:18;4030:2;4022:6;4018:15;3996:66;:::i;:::-;4123:2;4102:15;-1:-1:-1;;4098:29:6;4083:45;;;;4130:2;4079:54;;3877:262;-1:-1:-1;;3877:262:6:o;6615:258::-;6687:1;6697:113;6711:6;6708:1;6705:13;6697:113;;;6787:11;;;6781:18;6768:11;;;6761:39;6733:2;6726:10;6697:113;;;6828:6;6825:1;6822:13;6819:2;;;6863:1;6854:6;6849:3;6845:16;6838:27;6819:2;;6668:205;;;:::o;6878:380::-;6957:1;6953:12;;;;7000;;;7021:2;;7075:4;7067:6;7063:17;7053:27;;7021:2;7128;7120:6;7117:14;7097:18;7094:38;7091:2;;;7174:10;7169:3;7165:20;7162:1;7155:31;7209:4;7206:1;7199:15;7237:4;7234:1;7227:15;7091:2;;6933:325;;;:::o;7263:127::-;7324:10;7319:3;7315:20;7312:1;7305:31;7355:4;7352:1;7345:15;7379:4;7376:1;7369:15"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "597400",
            "executionCost": "632",
            "totalCost": "598032"
          },
          "external": {
            "changeColorCouldRevert(string)": "infinite",
            "changeColorDryRun(string)": "infinite",
            "changeColorOwner(string)": "infinite",
            "changeValueNoRevert(string)": "infinite",
            "getColor()": "infinite",
            "getMapping(string)": "infinite",
            "getVersion()": "infinite",
            "initialize(string)": "infinite",
            "isV2()": "232",
            "owner()": "1024",
            "renounceOwnership()": "infinite",
            "shouldRevert()": "1054",
            "switchShouldRevert()": "23012",
            "testMapping(string)": "infinite",
            "testRevert()": "319",
            "transferOwnership(address)": "23689",
            "updateMapping(string,uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "changeColorCouldRevert(string)": "0cab219a",
          "changeColorDryRun(string)": "ac7a25ee",
          "changeColorOwner(string)": "e186e727",
          "changeValueNoRevert(string)": "b85b2995",
          "getColor()": "9a86139b",
          "getMapping(string)": "11f45e9c",
          "getVersion()": "0d8e6e2c",
          "initialize(string)": "f62d1888",
          "isV2()": "2d94a2d0",
          "owner()": "8da5cb5b",
          "renounceOwnership()": "715018a6",
          "shouldRevert()": "d3072d82",
          "switchShouldRevert()": "142c9eb5",
          "testMapping(string)": "15b60141",
          "testRevert()": "a26388bb",
          "transferOwnership(address)": "f2fde38b",
          "updateMapping(string,uint256)": "5f606662"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"ColorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"ShouldRevertChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newColor\",\"type\":\"string\"}],\"name\":\"changeColorCouldRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newColor\",\"type\":\"string\"}],\"name\":\"changeColorDryRun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newColor\",\"type\":\"string\"}],\"name\":\"changeColorOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"changeValueNoRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_testKey\",\"type\":\"string\"}],\"name\":\"getMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initialColor\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldRevert\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchShouldRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"testMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testRevert\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_testKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_testVal\",\"type\":\"uint256\"}],\"name\":\"updateMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mr Tumeric A. Gardner\",\"custom:experimental\":\"This is an experimental contract.\",\"details\":\"All function calls are currently implemented without..\",\"kind\":\"dev\",\"methods\":{\"changeColorCouldRevert(string)\":{\"details\":\"The Alexandr N. Tetearing algorithm could increase precision\",\"params\":{\"newColor\":\"The new color to be stored in the box state\"}},\"changeColorDryRun(string)\":{\"custom:event-only\":\"This function simply emit an event.\",\"details\":\"The Alexandr N. Tetearing algorithm could increase precision\",\"params\":{\"newColor\":\"The new color to be stored in the box state\"}},\"changeColorOwner(string)\":{\"details\":\"The Alexandr N. Tetearing algorithm could increase precision\",\"params\":{\"newColor\":\"The new color to be stored in the box state\"}},\"getColor()\":{\"details\":\"Returns only a string.\",\"returns\":{\"_0\":\"The current color of in the box state\"}},\"getVersion()\":{\"details\":\"Returns only a string.\",\"returns\":{\"_0\":\"The current version of the contract\"}},\"isV2()\":{\"details\":\"Returns an acknowledgment that it is a v2 implementation.\",\"returns\":{\"_0\":\"An acknowledgment that it is a v2 implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A box containing some hex color\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeColorCouldRevert(string)\":{\"notice\":\"Allow to change the color stored in the BoxOnly the Owner can call this function\"},\"changeColorDryRun(string)\":{\"notice\":\"Allow to simulate changing the color stored in the Box\"},\"changeColorOwner(string)\":{\"notice\":\"Allow to change the color stored in the BoxOnly the Owner can call this function\"},\"getColor()\":{\"notice\":\"Returns current color in the box.\"},\"getVersion()\":{\"notice\":\"Returns current version of the contract.\"},\"isV2()\":{\"notice\":\"A v2 implementation.\"}},\"notice\":\"You can use this contract for only the most basic simulation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ColorBoxV2.sol\":\"ColorBoxV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/ColorBoxV1.sol\":{\"content\":\"// contracts/Box.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @title A box containing some hex color\\n/// @author Mr Tumeric A. Gardner\\n/// @notice You can use this contract for only the most basic simulation\\n/// @dev All function calls are currently implemented without..\\n/// @custom:experimental This is an experimental contract.\\ncontract ColorBoxV1 is Initializable, OwnableUpgradeable {\\n  string private color;\\n  bool public shouldRevert;\\n  mapping (string => uint) public testMapping;\\n\\n\\n  event ColorChanged(string newValue);\\n  event ShouldRevertChanged(bool newValue);\\n\\n  function initialize(string memory initialColor) public initializer {\\n    __Context_init();\\n\\n    color = initialColor;\\n    shouldRevert = false;\\n  }\\n\\n  function updateMapping(string memory _testKey, uint _testVal) public {\\n    testMapping[_testKey] = _testVal;\\n  }\\n\\n  function getMapping(string memory _testKey) public view returns (uint) {\\n    return testMapping[_testKey];\\n  }\\n\\n  function testRevert() pure public {\\n    require(false, \\\"Call has been reverted!\\\");\\n  }\\n\\n  function switchShouldRevert() public onlyOwner {\\n    shouldRevert = !shouldRevert;\\n    emit ShouldRevertChanged(shouldRevert);\\n  }\\n\\n  function changeValueNoRevert(string calldata newValue) public {\\n    color = newValue;\\n    emit ColorChanged(newValue);\\n  }\\n\\n\\n  /// @notice Allow to change the color stored in the Box\\n  /// @notice Only the Owner can call this function\\n  /// @dev The Alexandr N. Tetearing algorithm could increase precision\\n  /// @param newColor The new color to be stored in the box state\\n  function changeColorCouldRevert(string calldata newColor) public {\\n    require(!shouldRevert, \\\"Set to revert\\\");\\n    color = newColor;\\n    emit ColorChanged(newColor);\\n  }\\n\\n  /// @notice Allow to change the color stored in the Box\\n  /// @notice Only the Owner can call this function\\n  /// @dev The Alexandr N. Tetearing algorithm could increase precision\\n  /// @param newColor The new color to be stored in the box state\\n  function changeColorOwner(string calldata newColor) public onlyOwner {\\n    color = newColor;\\n    emit ColorChanged(newColor);\\n  }\\n\\n  /// @notice Allow to simulate changing the color stored in the Box\\n  /// @dev The Alexandr N. Tetearing algorithm could increase precision\\n  /// @param newColor The new color to be stored in the box state\\n  /// @custom:event-only This function simply emit an event.\\n  function changeColorDryRun(string calldata newColor) public {\\n    emit ColorChanged(newColor);\\n  }\\n\\n  /// @notice Returns current color in the box.\\n  /// @dev Returns only a string.\\n  /// @return The current color of in the box state\\n  function getColor() public view returns (string memory) {\\n    require(!shouldRevert, \\\"Set to revert\\\");\\n    return color;\\n  }\\n\\n  /// @notice Returns current version of the contract.\\n  /// @dev Returns only a string.\\n  /// @return The current version of the contract\\n  function getVersion() virtual public pure returns (string memory) {\\n    return \\\"V1\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x510cd9cce85999e58e1f39cbdbc64f7ab314bdea281b73a7e6f31a2ff6e7a6f7\",\"license\":\"MIT\"},\"contracts/ColorBoxV2.sol\":{\"content\":\"// contracts/Box.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ColorBoxV1.sol\\\";\\n\\n/// @title A box containing some hex color\\n/// @author Mr Tumeric A. Gardner\\n/// @notice You can use this contract for only the most basic simulation\\n/// @dev All function calls are currently implemented without..\\n/// @custom:experimental This is an experimental contract.\\ncontract ColorBoxV2 is ColorBoxV1 {\\n  /// @notice A v2 implementation.\\n  /// @dev Returns an acknowledgment that it is a v2 implementation.\\n  /// @return An acknowledgment that it is a v2 implementation.\\n  function isV2() public pure returns (bool) {\\n    return true;\\n  }\\n  \\n\\n  /// @notice Returns current version of the contract.\\n  /// @dev Returns only a string.\\n  /// @return The current version of the contract\\n  function getVersion() override public pure returns (string memory) {\\n    return \\\"V2\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x44d75b5b5de1cd76194a1c47e8a056d930d2eb5008c9ff19736b6ccc5fd5b26a\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 138,
            "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 141,
            "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 566,
            "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage"
          },
          {
            "astId": 10,
            "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address"
          },
          {
            "astId": 130,
            "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage"
          },
          {
            "astId": 578,
            "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
            "label": "color",
            "offset": 0,
            "slot": "101",
            "type": "t_string_storage"
          },
          {
            "astId": 580,
            "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
            "label": "shouldRevert",
            "offset": 0,
            "slot": "102",
            "type": "t_bool"
          },
          {
            "astId": 584,
            "contract": "contracts/ColorBoxV2.sol:ColorBoxV2",
            "label": "testMapping",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_string_memory_ptr,t_uint256)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "base": "t_uint256",
            "encoding": "inplace",
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "base": "t_uint256",
            "encoding": "inplace",
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_string_memory_ptr,t_uint256)": {
            "encoding": "mapping",
            "key": "t_string_memory_ptr",
            "label": "mapping(string => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_memory_ptr": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "encoding": "inplace",
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "changeColorCouldRevert(string)": {
            "notice": "Allow to change the color stored in the BoxOnly the Owner can call this function"
          },
          "changeColorDryRun(string)": {
            "notice": "Allow to simulate changing the color stored in the Box"
          },
          "changeColorOwner(string)": {
            "notice": "Allow to change the color stored in the BoxOnly the Owner can call this function"
          },
          "getColor()": {
            "notice": "Returns current color in the box."
          },
          "getVersion()": {
            "notice": "Returns current version of the contract."
          },
          "isV2()": {
            "notice": "A v2 implementation."
          }
        },
        "notice": "You can use this contract for only the most basic simulation",
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/ColorBoxV1.sol\": {\n      \"content\": \"// contracts/Box.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @title A box containing some hex color\\n/// @author Mr Tumeric A. Gardner\\n/// @notice You can use this contract for only the most basic simulation\\n/// @dev All function calls are currently implemented without..\\n/// @custom:experimental This is an experimental contract.\\ncontract ColorBoxV1 is Initializable, OwnableUpgradeable {\\n  string private color;\\n  bool public shouldRevert;\\n  mapping (string => uint) public testMapping;\\n\\n\\n  event ColorChanged(string newValue);\\n  event ShouldRevertChanged(bool newValue);\\n\\n  function initialize(string memory initialColor) public initializer {\\n    __Context_init();\\n\\n    color = initialColor;\\n    shouldRevert = false;\\n  }\\n\\n  function updateMapping(string memory _testKey, uint _testVal) public {\\n    testMapping[_testKey] = _testVal;\\n  }\\n\\n  function getMapping(string memory _testKey) public view returns (uint) {\\n    return testMapping[_testKey];\\n  }\\n\\n  function testRevert() pure public {\\n    require(false, \\\"Call has been reverted!\\\");\\n  }\\n\\n  function switchShouldRevert() public onlyOwner {\\n    shouldRevert = !shouldRevert;\\n    emit ShouldRevertChanged(shouldRevert);\\n  }\\n\\n  function changeValueNoRevert(string calldata newValue) public {\\n    color = newValue;\\n    emit ColorChanged(newValue);\\n  }\\n\\n\\n  /// @notice Allow to change the color stored in the Box\\n  /// @notice Only the Owner can call this function\\n  /// @dev The Alexandr N. Tetearing algorithm could increase precision\\n  /// @param newColor The new color to be stored in the box state\\n  function changeColorCouldRevert(string calldata newColor) public {\\n    require(!shouldRevert, \\\"Set to revert\\\");\\n    color = newColor;\\n    emit ColorChanged(newColor);\\n  }\\n\\n  /// @notice Allow to change the color stored in the Box\\n  /// @notice Only the Owner can call this function\\n  /// @dev The Alexandr N. Tetearing algorithm could increase precision\\n  /// @param newColor The new color to be stored in the box state\\n  function changeColorOwner(string calldata newColor) public onlyOwner {\\n    color = newColor;\\n    emit ColorChanged(newColor);\\n  }\\n\\n  /// @notice Allow to simulate changing the color stored in the Box\\n  /// @dev The Alexandr N. Tetearing algorithm could increase precision\\n  /// @param newColor The new color to be stored in the box state\\n  /// @custom:event-only This function simply emit an event.\\n  function changeColorDryRun(string calldata newColor) public {\\n    emit ColorChanged(newColor);\\n  }\\n\\n  /// @notice Returns current color in the box.\\n  /// @dev Returns only a string.\\n  /// @return The current color of in the box state\\n  function getColor() public view returns (string memory) {\\n    require(!shouldRevert, \\\"Set to revert\\\");\\n    return color;\\n  }\\n\\n  /// @notice Returns current version of the contract.\\n  /// @dev Returns only a string.\\n  /// @return The current version of the contract\\n  function getVersion() virtual public pure returns (string memory) {\\n    return \\\"V1\\\";\\n  }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/ColorBoxV2.sol\": {\n      \"content\": \"// contracts/Box.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ColorBoxV1.sol\\\";\\n\\n/// @title A box containing some hex color\\n/// @author Mr Tumeric A. Gardner\\n/// @notice You can use this contract for only the most basic simulation\\n/// @dev All function calls are currently implemented without..\\n/// @custom:experimental This is an experimental contract.\\ncontract ColorBoxV2 is ColorBoxV1 {\\n  /// @notice A v2 implementation.\\n  /// @dev Returns an acknowledgment that it is a v2 implementation.\\n  /// @return An acknowledgment that it is a v2 implementation.\\n  function isV2() public pure returns (bool) {\\n    return true;\\n  }\\n  \\n\\n  /// @notice Returns current version of the contract.\\n  /// @dev Returns only a string.\\n  /// @return The current version of the contract\\n  function getVersion() override public pure returns (string memory) {\\n    return \\\"V2\\\";\\n  }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "66cbba5961c3cadaa1a6f39af7f1a5ef",
      "transactionHash": "0xab0e9d900de2299bdf5371fd1620af5f66238cd7de3ac42421eaef40e9fb4187",
      "args": []
    },
    "decoded": {
      "from": "0x0000000000000000000000000000000002D9973E",
      "gasPrice": "133",
      "gasLimit": "0",
      "to": null,
      "value": "0",
      "nonce": 111,
      "data": "0x608060405234801561001057600080fd5b50610bab806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063b85b299511610071578063b85b299514610215578063d3072d8214610228578063e186e72714610235578063f2fde38b14610248578063f62d18881461025b57600080fd5b80638da5cb5b146101d75780639a86139b146101f2578063a26388bb146101fa578063ac7a25ee1461020257600080fd5b806315b60141116100de57806315b601411461017e5780632d94a2d0146101a95780635f606662146101bc578063715018a6146101cf57600080fd5b80630cab219a146101105780630d8e6e2c1461012557806311f45e9c14610155578063142c9eb514610176575b600080fd5b61012361011e36600461098b565b61026e565b005b6040805180820190915260028152612b1960f11b60208201525b60405161014c9190610ac1565b60405180910390f35b6101686101633660046109f8565b610300565b60405190815260200161014c565b610123610328565b61016861018c3660046109f8565b805160208183018101805160678252928201919093012091525481565b60015b604051901515815260200161014c565b6101236101ca366004610a33565b61037d565b6101236103a2565b6033546040516001600160a01b03909116815260200161014c565b61013f6103b6565b61012361048c565b61012361021036600461098b565b6104d4565b61012361022336600461098b565b6102b6565b6066546101ac9060ff1681565b61012361024336600461098b565b610505565b61012361025636600461095d565b61050d565b6101236102693660046109f8565b610586565b60665460ff16156102b65760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064015b60405180910390fd5b6102c2606583836107c9565b507fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b60405180910390a15050565b60006067826040516103129190610a76565b9081526020016040518091039020549050919050565b6103306106b2565b6066805460ff8082161560ff1990921682179092556040519116151581527f88e95cf2f314e458491f98f3be8f296ee704bfc5b2cbeddcda73b61d44c9060b9060200160405180910390a1565b8060678360405161038e9190610a76565b908152604051908190036020019020555050565b6103aa6106b2565b6103b4600061070c565b565b60665460609060ff16156103fc5760405162461bcd60e51b815260206004820152600d60248201526c14d95d081d1bc81c995d995c9d609a1b60448201526064016102ad565b6065805461040990610b24565b80601f016020809104026020016040519081016040528092919081815260200182805461043590610b24565b80156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b5050505050905090565b60405162461bcd60e51b815260206004820152601760248201527f43616c6c20686173206265656e2072657665727465642100000000000000000060448201526064016102ad565b7fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b82826040516102f4929190610a92565b6102b66106b2565b6105156106b2565b6001600160a01b03811661057a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ad565b6105838161070c565b50565b600054610100900460ff16158080156105a65750600054600160ff909116105b806105c05750303b1580156105c0575060005460ff166001145b6106235760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102ad565b6000805460ff191660011790558015610646576000805461ff0019166101001790555b61064e61075e565b815161066190606590602085019061084d565b506066805460ff1916905580156106ae576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016102f4565b5050565b6033546001600160a01b031633146103b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ad565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166103b45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016102ad565b8280546107d590610b24565b90600052602060002090601f0160209004810192826107f7576000855561083d565b82601f106108105782800160ff1982351617855561083d565b8280016001018555821561083d579182015b8281111561083d578235825591602001919060010190610822565b506108499291506108c1565b5090565b82805461085990610b24565b90600052602060002090601f01602090048101928261087b576000855561083d565b82601f1061089457805160ff191683800117855561083d565b8280016001018555821561083d579182015b8281111561083d5782518255916020019190600101906108a6565b5b8082111561084957600081556001016108c2565b600082601f8301126108e6578081fd5b813567ffffffffffffffff8082111561090157610901610b5f565b604051601f8301601f19908116603f0116810190828211818310171561092957610929610b5f565b81604052838152866020858801011115610941578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561096e578081fd5b81356001600160a01b0381168114610984578182fd5b9392505050565b6000806020838503121561099d578081fd5b823567ffffffffffffffff808211156109b4578283fd5b818501915085601f8301126109c7578283fd5b8135818111156109d5578384fd5b8660208285010111156109e6578384fd5b60209290920196919550909350505050565b600060208284031215610a09578081fd5b813567ffffffffffffffff811115610a1f578182fd5b610a2b848285016108d6565b949350505050565b60008060408385031215610a45578182fd5b823567ffffffffffffffff811115610a5b578283fd5b610a67858286016108d6565b95602094909401359450505050565b60008251610a88818460208701610af4565b9190910192915050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020815260008251806020840152610ae0816040850160208701610af4565b601f01601f19169190910160400192915050565b60005b83811015610b0f578181015183820152602001610af7565b83811115610b1e576000848401525b50505050565b600181811c90821680610b3857607f821691505b60208210811415610b5957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220d236d7401c8f60813bde49a6cdc8a06041433d82405214b1f60e987981fc722364736f6c63430008040033",
      "r": "0xa2018c7c9ec4d3a649b15466585da96c8dc53e953f99bef2955f0fb1485b1756",
      "s": "0x39616e7a4089837507e4edf30cc4e4eae8b8dc9bdf1e69e22db90f32ba55d7cb",
      "v": 0,
      "chainId": 296
    }
  }
}