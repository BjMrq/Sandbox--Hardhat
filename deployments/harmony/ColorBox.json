{
  "address": "0x98ae3dC715998aAd0038e408Aeb08a64acF9A011",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "initialColor",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "ColorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newColor",
          "type": "string"
        }
      ],
      "name": "changeColor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newColor",
          "type": "string"
        }
      ],
      "name": "changeColorDryRun",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x34c770ccaa400e454c12f4e4f9fbbc09f5908eacd102b3732040f3b2b297b3c5",
  "receipt": {
    "to": null,
    "from": "0x1bCa0bf5e8796e45F4F25927AaB9BF2991fd3a5B",
    "contractAddress": "0x98ae3dC715998aAd0038e408Aeb08a64acF9A011",
    "transactionIndex": 0,
    "gasUsed": "431391",
    "logsBloom": "0x
    "blockHash": "0xdae2f9c42e7fb9c5ce5268e2ce807707947d03f376ed71914d0ebe461653f2c5",
    "transactionHash": "0x34c770ccaa400e454c12f4e4f9fbbc09f5908eacd102b3732040f3b2b297b3c5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30257348,
        "transactionHash": "0x34c770ccaa400e454c12f4e4f9fbbc09f5908eacd102b3732040f3b2b297b3c5",
        "address": "0x98ae3dC715998aAd0038e408Aeb08a64acF9A011",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001bca0bf5e8796e45f4f25927aab9bf2991fd3a5b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdae2f9c42e7fb9c5ce5268e2ce807707947d03f376ed71914d0ebe461653f2c5"
      }
    ],
    "blockNumber": 30257348,
    "cumulativeGasUsed": "431391",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "#6038ca"
  ],
  "numDeployments": 1,
  "solcInputHash": "633e8db2b435168f7e3362e797979ee6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initialColor\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"ColorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newColor\",\"type\":\"string\"}],\"name\":\"changeColor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newColor\",\"type\":\"string\"}],\"name\":\"changeColorDryRun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mr Tumeric A. Gardner\",\"custom:experimental\":\"This is an experimental contract.\",\"details\":\"All function calls are currently implemented without..\",\"kind\":\"dev\",\"methods\":{\"changeColor(string)\":{\"details\":\"The Alexandr N. Tetearing algorithm could increase precision\",\"params\":{\"newColor\":\"The new color to be stored in the box state\"}},\"changeColorDryRun(string)\":{\"custom:event-only\":\"This function simply emit an event.\",\"details\":\"The Alexandr N. Tetearing algorithm could increase precision\",\"params\":{\"newColor\":\"The new color to be stored in the box state\"}},\"getColor()\":{\"details\":\"Returns only a string.\",\"returns\":{\"_0\":\"The current color of in the box state\"}},\"getVersion()\":{\"details\":\"Returns only a string.\",\"returns\":{\"_0\":\"The current version of the contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A box containing some hex color\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeColor(string)\":{\"notice\":\"Allow to change the color stored in the BoxOnly the Owner can call this function\"},\"changeColorDryRun(string)\":{\"notice\":\"Allow to simulate changing the color stored in the Box\"},\"getColor()\":{\"notice\":\"Returns current color in the box.\"},\"getVersion()\":{\"notice\":\"Returns current version of the contract.\"}},\"notice\":\"You can use this contract for only the most basic simulation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ColorBox.sol\":\"ColorBox\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ColorBox.sol\":{\"content\":\"// contracts/Box.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title A box containing some hex color\\n/// @author Mr Tumeric A. Gardner\\n/// @notice You can use this contract for only the most basic simulation\\n/// @dev All function calls are currently implemented without..\\n/// @custom:experimental This is an experimental contract.\\ncontract ColorBox is Ownable {\\n  string private color;\\n\\n  // Emitted when the stored value changes\\n  event ColorChanged(string newValue);\\n\\n  constructor(string memory initialColor) {\\n    color = initialColor;\\n  }\\n\\n  /// @notice Allow to change the color stored in the Box\\n  /// @notice Only the Owner can call this function\\n  /// @dev The Alexandr N. Tetearing algorithm could increase precision\\n  /// @param newColor The new color to be stored in the box state\\n  function changeColor(string calldata newColor) public onlyOwner {\\n    color = newColor;\\n    emit ColorChanged(newColor);\\n  }\\n\\n  /// @notice Allow to simulate changing the color stored in the Box\\n  /// @dev The Alexandr N. Tetearing algorithm could increase precision\\n  /// @param newColor The new color to be stored in the box state\\n  /// @custom:event-only This function simply emit an event.\\n  function changeColorDryRun(string calldata newColor) public {\\n    emit ColorChanged(newColor);\\n  }\\n\\n  /// @notice Returns current color in the box.\\n  /// @dev Returns only a string.\\n  /// @return The current color of in the box state\\n  function getColor() public view returns (string memory) {\\n    return color;\\n  }\\n\\n  /// @notice Returns current version of the contract.\\n  /// @dev Returns only a string.\\n  /// @return The current version of the contract\\n  function getVersion() virtual public pure returns (string memory) {\\n    return \\\"V1\\\";\\n  }\\n}\\n\",\"keccak256\":\"0xa6377150be0846c5ee723266b776d0a4568744bda45154b957422944bf2699aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161084838038061084883398101604081905261002f91610151565b61003833610052565b805161004b9060019060208401906100a2565b505061025b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546100ae90610220565b90600052602060002090601f0160209004810192826100d05760008555610116565b82601f106100e957805160ff1916838001178555610116565b82800160010185558215610116579182015b828111156101165782518255916020019190600101906100fb565b50610122929150610126565b5090565b5b808211156101225760008155600101610127565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561016457600080fd5b82516001600160401b038082111561017b57600080fd5b818501915085601f83011261018f57600080fd5b8151818111156101a1576101a161013b565b604051601f8201601f19908116603f011681019083821181831017156101c9576101c961013b565b8160405282815288868487010111156101e157600080fd5b600093505b8284101561020357848401860151818501870152928501926101e6565b828411156102145760008684830101525b98975050505050505050565b600181811c9082168061023457607f821691505b6020821081141561025557634e487b7160e01b600052602260045260246000fd5b50919050565b6105de8061026a6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100cf5780639a86139b146100ea578063ac7a25ee146100f2578063f2fde38b1461010557600080fd5b80630d8e6e2c146100825780636aa2afd5146100b2578063715018a6146100c7575b600080fd5b604080518082019091526002815261563160f01b60208201525b6040516100a99190610412565b60405180910390f35b6100c56100c0366004610467565b610118565b005b6100c5610195565b6000546040516001600160a01b0390911681526020016100a9565b61009c6101cb565b6100c5610100366004610467565b61025d565b6100c56101133660046104d9565b61028e565b6000546001600160a01b0316331461014b5760405162461bcd60e51b815260040161014290610509565b60405180910390fd5b61015760018383610379565b507fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b828260405161018992919061053e565b60405180910390a15050565b6000546001600160a01b031633146101bf5760405162461bcd60e51b815260040161014290610509565b6101c96000610329565b565b6060600180546101da9061056d565b80601f01602080910402602001604051908101604052809291908181526020018280546102069061056d565b80156102535780601f1061022857610100808354040283529160200191610253565b820191906000526020600020905b81548152906001019060200180831161023657829003601f168201915b5050505050905090565b7fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b828260405161018992919061053e565b6000546001600160a01b031633146102b85760405162461bcd60e51b815260040161014290610509565b6001600160a01b03811661031d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610142565b61032681610329565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546103859061056d565b90600052602060002090601f0160209004810192826103a757600085556103ed565b82601f106103c05782800160ff198235161785556103ed565b828001600101855582156103ed579182015b828111156103ed5782358255916020019190600101906103d2565b506103f99291506103fd565b5090565b5b808211156103f957600081556001016103fe565b600060208083528351808285015260005b8181101561043f57858101830151858201604001528201610423565b81811115610451576000604083870101525b50601f01601f1916929092016040019392505050565b6000806020838503121561047a57600080fd5b823567ffffffffffffffff8082111561049257600080fd5b818501915085601f8301126104a657600080fd5b8135818111156104b557600080fd5b8660208285010111156104c757600080fd5b60209290920196919550909350505050565b6000602082840312156104eb57600080fd5b81356001600160a01b038116811461050257600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600181811c9082168061058157607f821691505b602082108114156105a257634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220ae9eb2d2d995655ec45cbf721ac32c4ab6c09ee2b88d5ccd6f14d538ce79f85c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100cf5780639a86139b146100ea578063ac7a25ee146100f2578063f2fde38b1461010557600080fd5b80630d8e6e2c146100825780636aa2afd5146100b2578063715018a6146100c7575b600080fd5b604080518082019091526002815261563160f01b60208201525b6040516100a99190610412565b60405180910390f35b6100c56100c0366004610467565b610118565b005b6100c5610195565b6000546040516001600160a01b0390911681526020016100a9565b61009c6101cb565b6100c5610100366004610467565b61025d565b6100c56101133660046104d9565b61028e565b6000546001600160a01b0316331461014b5760405162461bcd60e51b815260040161014290610509565b60405180910390fd5b61015760018383610379565b507fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b828260405161018992919061053e565b60405180910390a15050565b6000546001600160a01b031633146101bf5760405162461bcd60e51b815260040161014290610509565b6101c96000610329565b565b6060600180546101da9061056d565b80601f01602080910402602001604051908101604052809291908181526020018280546102069061056d565b80156102535780601f1061022857610100808354040283529160200191610253565b820191906000526020600020905b81548152906001019060200180831161023657829003601f168201915b5050505050905090565b7fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b828260405161018992919061053e565b6000546001600160a01b031633146102b85760405162461bcd60e51b815260040161014290610509565b6001600160a01b03811661031d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610142565b61032681610329565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546103859061056d565b90600052602060002090601f0160209004810192826103a757600085556103ed565b82601f106103c05782800160ff198235161785556103ed565b828001600101855582156103ed579182015b828111156103ed5782358255916020019190600101906103d2565b506103f99291506103fd565b5090565b5b808211156103f957600081556001016103fe565b600060208083528351808285015260005b8181101561043f57858101830151858201604001528201610423565b81811115610451576000604083870101525b50601f01601f1916929092016040019392505050565b6000806020838503121561047a57600080fd5b823567ffffffffffffffff8082111561049257600080fd5b818501915085601f8301126104a657600080fd5b8135818111156104b557600080fd5b8660208285010111156104c757600080fd5b60209290920196919550909350505050565b6000602082840312156104eb57600080fd5b81356001600160a01b038116811461050257600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600181811c9082168061058157607f821691505b602082108114156105a257634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220ae9eb2d2d995655ec45cbf721ac32c4ab6c09ee2b88d5ccd6f14d538ce79f85c64736f6c63430008090033",
  "devdoc": {
    "author": "Mr Tumeric A. Gardner",
    "custom:experimental": "This is an experimental contract.",
    "details": "All function calls are currently implemented without..",
    "kind": "dev",
    "methods": {
      "changeColor(string)": {
        "details": "The Alexandr N. Tetearing algorithm could increase precision",
        "params": {
          "newColor": "The new color to be stored in the box state"
        }
      },
      "changeColorDryRun(string)": {
        "custom:event-only": "This function simply emit an event.",
        "details": "The Alexandr N. Tetearing algorithm could increase precision",
        "params": {
          "newColor": "The new color to be stored in the box state"
        }
      },
      "getColor()": {
        "details": "Returns only a string.",
        "returns": {
          "_0": "The current color of in the box state"
        }
      },
      "getVersion()": {
        "details": "Returns only a string.",
        "returns": {
          "_0": "The current version of the contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A box containing some hex color",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeColor(string)": {
        "notice": "Allow to change the color stored in the BoxOnly the Owner can call this function"
      },
      "changeColorDryRun(string)": {
        "notice": "Allow to simulate changing the color stored in the Box"
      },
      "getColor()": {
        "notice": "Returns current color in the box."
      },
      "getVersion()": {
        "notice": "Returns current version of the contract."
      }
    },
    "notice": "You can use this contract for only the most basic simulation",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/ColorBox.sol:ColorBox",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5937,
        "contract": "contracts/ColorBox.sol:ColorBox",
        "label": "color",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}